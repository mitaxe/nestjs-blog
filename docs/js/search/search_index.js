var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.375,1,2.495]],["body/controllers/AppController.html",[0,2.374,1,4.309,2,1.979,3,0.262,4,0.229,5,0.229,6,4.454,7,0.355,8,0.02,9,0.935,10,3.922,11,4.454,12,0.262,13,0.112,14,2.658,15,1.776,16,0.017,17,0.017]],["title/modules/AppModule.html",[18,1.234,19,2.495]],["body/modules/AppModule.html",[1,3.556,2,1.675,3,0.154,4,0.135,5,0.135,7,0.4,8,0.02,9,0.551,10,3.639,11,2.626,12,0.154,13,0.066,16,0.012,17,0.012,18,1.759,19,4.959,20,1.384,21,1.384,22,1.567,23,1.567,24,1.384,25,2.632,26,1.567,27,2.626,28,2.626,29,2.626,30,3.639,31,3.932,32,3.639,33,3.932,34,3.639,35,3.389,36,2.25,37,1.567,38,1.471,39,3.068,40,3.021,41,3.068,42,2.626,43,3.068,44,3.068,45,1.944,46,1.234,47,3.068,48,1.471,49,1.676,50,3.068,51,3.352,52,5.63,53,1.799,54,3.068,55,4.404,56,3.068,57,4.404,58,3.068,59,4.404,60,3.068,61,3.068,62,3.068,63,1.471,64,3.068,65,3.068,66,2.626,67,3.068,68,3.068,69,1.944,70,3.068,71,0.355,72,3.068,73,3.068,74,3.068,75,3.068,76,3.068,77,3.068,78,3.068,79,1.799,80,3.068,81,2.335,82,3.068,83,3.068,84,3.068,85,3.068,86,3.068]],["title/injectables/AppService.html",[10,2.12,87,0.649]],["body/injectables/AppService.html",[3,0.254,4,0.221,5,0.221,7,0.287,8,0.02,9,0.906,10,3.592,12,0.254,13,0.109,16,0.017,17,0.017,87,1.1,88,1.816,89,4.315,90,0.503,91,1.785,92,6.862,93,0.668,94,5.042,95,1.469,96,1.983,97,1.548,98,5.042,99,5.042]],["title/controllers/AuthController.html",[0,1.375,100,2.495]],["body/controllers/AuthController.html",[0,1.506,2,1.506,3,0.199,4,0.174,5,0.174,7,0.357,8,0.02,9,0.712,12,0.199,13,0.086,14,2.023,15,1.352,16,0.014,17,0.014,71,0.458,90,0.395,91,1.531,93,0.525,95,1.154,97,1.217,100,3.626,101,3.39,102,2.51,103,3.39,104,2.242,105,3.999,106,3.014,107,3.938,108,1.096,109,2.734,110,5.374,111,3.961,112,3.626,113,1.737,114,3.961,115,5.254,116,3.961,117,3.961,118,3.961,119,1.217,120,1.096,121,0.841,122,2.51,123,3.961,124,1.154,125,3.961,126,3.22,127,3.39,128,3.014,129,3.014,130,3.329,131,3.735,132,1.427,133,3.961,134,2.51,135,2.869,136,3.961,137,3.961,138,3.961,139,3.961,140,3.961,141,3.961]],["title/modules/AuthModule.html",[18,1.234,30,2.12]],["body/modules/AuthModule.html",[2,1.932,3,0.19,4,0.165,5,0.165,7,0.401,8,0.02,9,0.676,12,0.19,13,0.081,16,0.014,17,0.014,18,1.962,20,1.699,21,1.699,22,1.923,23,1.923,24,1.699,25,2.936,26,2.936,30,4.088,35,2.773,36,2.594,37,1.923,38,1.805,40,2.208,51,2.865,53,2.208,100,3.966,126,3.911,127,3.223,142,3.223,143,3.223,144,3.223,145,3.881,146,3.765,147,3.218,148,3.765,149,3.765,150,2.594,151,3.765,152,3.218,153,3.765,154,3.765,155,3.223,156,3.223,157,3.223,158,3.765,159,2.865,160,3.223,161,3.223,162,3.765,163,3.765]],["title/injectables/AuthService.html",[87,0.649,126,1.974]],["body/injectables/AuthService.html",[3,0.207,4,0.181,5,0.181,7,0.342,8,0.02,9,0.739,12,0.207,13,0.089,14,2.1,15,1.404,16,0.015,17,0.015,63,1.971,71,0.623,87,0.968,88,1.481,90,0.41,91,1.57,93,0.796,95,1.57,97,1.654,104,2.581,105,4.098,106,4.098,107,3.879,110,3.52,119,1.654,120,1.49,121,1.143,126,2.941,128,3.129,129,3.129,145,3.98,155,3.52,164,3.52,165,5.454,166,2.555,167,1.855,168,4.112,169,4.112,170,4.112,171,4.112,172,4.112,173,1.971,174,4.112]],["title/injectables/BcryptProvider.html",[87,0.649,152,2.29]],["body/injectables/BcryptProvider.html",[3,0.198,4,0.173,5,0.173,7,0.334,8,0.02,9,0.707,12,0.198,13,0.085,16,0.014,17,0.014,71,0.605,87,0.94,88,1.418,90,0.393,91,1.525,93,0.694,95,1.525,96,2.277,97,1.607,119,1.607,120,1.447,121,1.111,150,2.673,152,3.315,166,2.853,175,3.37,176,4.479,177,4.479,178,4.479,179,5.738,180,5.361,181,3.937,182,3.315,183,4.323,184,4.479,185,3.937,186,3.37,187,4.479,188,3.937,189,1.776,190,5.233,191,2.996,192,3.937,193,3.937]],["title/classes/CreateManyUsersDto.html",[13,0.078,194,2.12]],["body/classes/CreateManyUsersDto.html",[3,0.233,4,0.203,5,0.203,7,0.361,8,0.02,12,0.233,13,0.137,16,0.016,17,0.016,63,2.218,71,0.735,90,0.462,93,0.613,108,1.28,194,3.406,195,1.76,196,4.42,197,3.68,198,3.96,199,1.784,200,4.832,201,3.401,202,4.627,203,3.96,204,4.627,205,4.972,206,4.972,207,1.86,208,1.969,209,2.931,210,3.193,211,3.96]],["title/classes/CreateMetaOptionsDto.html",[13,0.078,212,2.12]],["body/classes/CreateMetaOptionsDto.html",[3,0.226,4,0.197,5,0.197,7,0.324,8,0.02,12,0.226,13,0.123,16,0.016,17,0.016,48,3.156,63,3,71,0.519,90,0.447,93,0.594,96,1.843,108,1.24,113,1.24,124,1.659,132,1.614,182,3.607,195,1.705,199,1.749,207,1.802,212,3.339,213,2.908,214,4.333,215,3.837,216,4.762,217,2.84,218,4.873,219,2.908,220,4.873,221,4.873,222,4.483,223,4.483,224,3.607,225,4.333,226,3.339]],["title/classes/CreatePostDto.html",[13,0.078,227,2.12]],["body/classes/CreatePostDto.html",[3,0.096,4,0.083,5,0.083,7,0.292,8,0.02,12,0.096,13,0.083,16,0.008,17,0.008,48,2.106,63,2.307,71,0.77,90,0.19,93,0.806,96,1.97,108,1.683,113,1.807,121,1.193,124,2.039,132,0.685,135,2.628,195,0.723,199,1.349,203,1.627,205,2.616,206,2.616,207,0.764,210,1.312,211,2.616,212,2.576,214,1.446,216,2.326,217,2.429,219,3.471,220,1.627,221,1.627,224,3.257,225,2.326,226,2.248,227,1.793,228,5.305,229,1.446,230,3.834,231,4.119,232,3.281,233,2.918,234,4.277,235,3.281,236,3.73,237,3.73,238,2.646,239,4.119,240,1.499,241,1.937,242,1.229,243,1.627,244,1.901,245,3.759,246,1.901,247,1.901,248,3.057,249,3.057,250,3.057,251,3.057,252,1.901,253,1.901,254,3.057,255,3.834,256,2.616,257,1.901,258,1.901,259,3.057,260,1.901,261,1.901,262,2.576,263,3.057,264,3.057,265,3.057,266,1.901,267,1.901,268,3.548,269,1.901,270,1.901,271,1.901,272,2.616,273,2.616,274,2.326,275,2.326,276,2.326,277,2.616,278,2.616,279,1.627,280,1.901,281,3.663,282,1.901,283,1.901,284,4.392,285,1.958,286,3.057,287,1.901,288,1.901,289,1.901,290,1.901,291,3.031,292,1.901,293,2.951,294,2.616,295,1.446,296,1.446,297,1.446,298,3.057,299,2.646,300,1.901,301,1.627,302,1.446,303,4.113,304,1.627,305,1.901,306,1.901,307,2.616,308,1.901,309,1.627,310,1.627,311,1.627,312,1.627,313,1.901,314,1.901,315,1.901,316,1.627,317,1.901,318,1.669,319,1.901,320,1.901,321,1.627]],["title/classes/CreateTagDto.html",[13,0.078,322,2.29]],["body/classes/CreateTagDto.html",[3,0.171,4,0.149,5,0.149,7,0.269,8,0.02,12,0.171,13,0.102,16,0.013,17,0.013,71,0.717,90,0.339,93,0.821,96,2.236,108,1.714,113,1.63,120,1.507,121,1.362,124,1.588,132,1.224,195,1.293,199,1.454,207,1.366,217,2.153,219,2.419,224,3.452,225,3.603,226,3.195,236,3.76,237,4.543,268,3.268,272,4.053,273,4.053,274,3.603,275,3.603,276,3.603,277,4.053,278,4.053,279,2.909,291,4.067,293,3.218,294,4.053,295,2.587,296,2.587,297,2.587,303,4.485,309,2.909,310,2.909,311,4.053,316,2.909,322,3,323,5.492,324,2.909,325,4.664,326,3.399,327,3.399,328,3.399,329,3.399,330,3.399,331,3.399,332,3.399,333,3.399,334,3.399,335,3.399,336,2.909]],["title/classes/CreateUserDto.html",[13,0.078,201,1.846]],["body/classes/CreateUserDto.html",[3,0.187,4,0.163,5,0.163,7,0.211,8,0.02,12,0.187,13,0.109,16,0.014,17,0.014,71,0.708,79,3.749,90,0.37,93,0.811,96,2.22,108,1.692,121,1.067,195,1.411,196,4.864,199,1.545,201,2.569,207,1.492,226,3.346,240,1.717,274,3.828,275,3.828,276,3.828,291,4.221,293,2.747,295,2.824,296,2.824,297,2.824,336,4.305,337,2.824,338,3.115,339,4.883,340,4.883,341,3.711,342,3.711,343,3.711,344,3.711,345,3.711,346,3.711,347,3.711,348,5.029,349,5.029,350,4.175,351,5.029,352,6.116,353,5.029,354,5.029,355,3.711,356,4.305,357,5.705,358,3.711,359,3.711]],["title/injectables/CreateUserProvider.html",[87,0.649,360,2.12]],["body/injectables/CreateUserProvider.html",[3,0.142,4,0.124,5,0.124,7,0.343,8,0.021,9,0.507,12,0.142,13,0.061,15,1.414,16,0.011,17,0.011,46,1.134,69,1.787,71,0.479,79,1.654,81,2.147,87,0.744,88,1.016,90,0.282,91,1.208,93,0.549,95,1.208,97,0.866,104,1.868,113,1.497,119,1.273,120,1.146,121,0.879,147,1.787,150,3.182,166,2.09,167,1.869,173,1.352,189,1.869,201,3.182,208,2.09,209,1.787,338,2.263,360,2.43,361,4.203,362,2.414,363,3.153,364,2.821,365,3.737,366,2.764,367,2.821,368,3.153,369,2.821,370,3.546,371,2.423,372,2.635,373,3.546,374,2.86,375,3.546,376,1.787,377,1.273,378,1.787,379,1.073,380,1.654,381,2.414,382,2.147,383,2.116,384,2.147,385,1.787,386,5.412,387,2.414,388,2.86,389,2.682,390,2.821,391,2.821,392,2.86,393,4.299,394,3.174,395,2.625,396,2.625,397,2.263,398,3.111,399,2.821,400,4.911,401,4.911,402,2.414,403,2.821,404,2.821,405,2.821,406,4.143,407,2.821,408,2.821,409,2.821,410,2.821]],["title/injectables/FindOneByEmailProvider.html",[87,0.649,411,2.12]],["body/injectables/FindOneByEmailProvider.html",[3,0.177,4,0.155,5,0.155,7,0.34,8,0.021,9,0.632,12,0.177,13,0.076,15,1.201,16,0.013,17,0.013,46,1.415,71,0.561,87,0.871,88,1.267,90,0.351,91,1.414,93,0.643,95,1.414,96,1.797,97,1.081,104,2.111,113,1.342,119,1.49,120,1.342,121,1.029,166,2.362,167,2.188,173,1.687,189,1.588,338,3.629,350,3.516,365,3.691,366,3.055,371,1.95,372,2.671,376,2.23,378,2.23,379,1.338,380,2.064,383,1.798,384,2.678,385,2.23,388,2.429,389,1.922,392,2.429,393,3.83,394,2.844,395,2.23,396,2.23,397,1.922,398,2.23,411,2.844,412,4.75,413,3.012,414,4.151,415,3.519,416,3.519,417,4.151,418,3.519,419,4.151,420,3.012,421,3.012,422,3.519,423,3.519,424,3.012]],["title/classes/GetPostsBaseDto.html",[13,0.078,425,2.495]],["body/classes/GetPostsBaseDto.html",[3,0.219,4,0.191,5,0.191,7,0.351,8,0.02,12,0.281,13,0.133,16,0.015,17,0.015,71,0.646,90,0.434,93,0.74,108,1.544,121,1.381,132,1.566,195,1.653,199,1.715,207,1.748,262,3.817,293,3.368,425,4.256,426,4.694,427,3.308,428,5.279,429,5.279,430,5.583,431,4.347,432,4.347,433,5.279,434,4.779,435,3.274,436,2.754,437,3.308,438,2.549,439,3]],["title/classes/GetPostsDto.html",[13,0.078,438,2.12]],["body/classes/GetPostsDto.html",[3,0.238,4,0.208,5,0.208,7,0.365,8,0.02,12,0.296,13,0.139,16,0.016,17,0.016,132,1.703,195,1.798,207,1.901,262,3.453,293,3.502,425,4.425,426,3.598,427,3.598,428,4.047,429,4.047,433,5.488,434,5.488,435,3.76,436,2.996,437,3.598,438,3.453,439,4.064]],["title/classes/GetUserParamDto.html",[13,0.078,440,2.29]],["body/classes/GetUserParamDto.html",[3,0.225,4,0.196,5,0.196,7,0.355,8,0.02,12,0.225,13,0.135,16,0.015,17,0.015,71,0.723,90,0.446,93,0.592,108,1.236,113,1.236,121,1.206,132,1.609,195,1.699,199,1.745,207,1.796,210,3.083,219,2.902,240,2.132,242,2.729,245,3.824,293,3.102,299,3.921,303,4.323,372,2.5,440,3.599,441,4.863,442,3.824,443,4.863,444,4.467,445,4.467,446,4.467]],["title/injectables/HashingProvider.html",[87,0.649,150,1.846]],["body/injectables/HashingProvider.html",[3,0.214,4,0.187,5,0.187,7,0.242,8,0.02,9,0.763,12,0.214,13,0.092,16,0.015,17,0.015,71,0.636,87,0.988,88,1.53,90,0.424,91,1.603,93,0.729,95,1.603,96,2.311,119,1.689,120,1.521,121,1.167,150,2.809,176,4.707,177,4.707,178,4.707,179,5.86,180,5.221,182,3.484,183,4.452,184,4.707,447,3.635,448,6.968,449,4.247,450,4.247]],["title/injectables/ManyUsersProvider.html",[87,0.649,451,1.974]],["body/injectables/ManyUsersProvider.html",[3,0.167,4,0.145,5,0.145,7,0.332,8,0.021,9,0.595,12,0.167,13,0.072,14,1.692,15,1.131,16,0.013,17,0.013,71,0.538,87,0.835,88,1.193,90,0.331,91,1.355,93,0.616,95,0.965,97,1.017,104,2.044,113,0.916,119,1.428,120,1.286,121,0.987,166,2.287,167,1.494,173,1.588,189,2.424,194,3.599,197,2.098,371,2.16,372,2.216,375,2.835,376,2.098,377,1.494,378,2.098,379,1.26,388,3.209,389,3.475,392,3.209,394,3.151,395,2.946,396,2.946,397,2.539,398,2.946,451,2.539,452,4.599,453,2.835,454,3.539,455,3.312,456,5.447,457,3.312,458,3.539,459,3.312,460,3.312,461,4.987,462,2.52,463,2.286,464,4.65,465,3.312,466,3.312,467,3.312,468,5.826,469,3.312,470,4.65,471,3.312,472,3.312,473,3.312,474,3.312,475,3.312,476,3.312,477,3.312,478,3.312,479,3.312,480,3.312,481,3.312]],["title/entities/MetaOption.html",[482,1.733,483,1.974]],["body/entities/MetaOption.html",[3,0.185,4,0.161,5,0.161,7,0.284,8,0.02,12,0.185,13,0.079,16,0.014,17,0.014,49,3.587,71,0.76,90,0.366,93,0.844,96,1.616,108,1.761,124,2.021,199,1.533,213,3.355,216,4.316,240,1.704,242,2.28,262,3.57,321,4.272,379,1.395,482,2.393,483,2.725,484,2.324,485,3.14,486,4.854,487,4.854,488,4.854,489,3.669,490,3.914,491,3.669,492,2.532,493,3.444,494,3.798,495,3.669,496,3.14,497,4.991,498,4.991,499,3.669,500,3.669,501,4.854,502,3.669,503,3.14,504,3.444,505,4.272,506,4.272,507,3.14]],["title/controllers/MetaOptionsController.html",[0,1.375,508,2.495]],["body/controllers/MetaOptionsController.html",[0,1.497,2,1.497,3,0.198,4,0.173,5,0.173,7,0.356,8,0.02,9,0.707,12,0.198,13,0.085,14,2.011,15,1.344,16,0.014,17,0.014,48,3.214,49,2.858,71,0.456,90,0.393,91,1.525,93,0.522,95,1.147,97,1.209,102,2.494,108,1.089,109,2.717,113,1.447,119,1.209,120,1.089,121,0.836,122,2.494,124,1.713,130,3.315,131,3.315,132,1.418,134,2.494,135,2.15,208,2.666,212,3.673,213,2.673,218,5.031,256,4.479,302,2.996,371,2.104,374,2.717,377,1.776,508,3.611,509,3.37,510,3.937,511,3.937,512,3.982,513,3.611,514,3.37,515,3.937,516,5.233,517,3.447,518,3.37,519,3.37,520,3.937,521,3.37,522,3.937]],["title/modules/MetaOptionsModule.html",[18,1.234,31,2.29]],["body/modules/MetaOptionsModule.html",[2,2.137,3,0.221,4,0.193,5,0.193,7,0.384,8,0.02,9,0.789,12,0.221,13,0.095,16,0.015,17,0.015,18,2.115,20,1.981,21,1.981,22,2.243,23,2.243,24,1.981,25,3.165,26,2.243,31,4.376,36,2.87,37,2.243,38,2.105,40,2.575,45,2.782,46,1.765,48,2.694,49,2.398,213,2.243,483,2.398,508,4.277,517,4.051,518,3.759,519,3.759,523,3.759,524,3.759,525,4.391,526,4.391,527,3.031,528,4.391]],["title/injectables/MetaOptionsService.html",[87,0.649,517,2.12]],["body/injectables/MetaOptionsService.html",[3,0.202,4,0.176,5,0.176,7,0.373,8,0.02,9,0.72,12,0.202,13,0.087,16,0.014,17,0.014,46,1.612,48,2.54,71,0.613,87,0.952,88,1.444,90,0.4,91,1.544,93,0.702,95,1.169,97,1.232,104,2.256,119,1.627,120,1.465,121,1.124,124,1.169,166,2.524,167,2.39,173,1.923,189,1.809,208,2.254,212,3.847,213,3.03,302,3.052,366,3.223,377,1.809,379,1.525,380,2.352,383,2.048,483,2.893,517,3.107,527,2.768,529,5.077,530,3.432,531,4.01,532,4.01,533,5.297,534,5.297,535,4.01,536,4.01,537,4.01,538,4.01]],["title/interfaces/Paginated.html",[539,2.495,540,2.29]],["body/interfaces/Paginated.html",[3,0.227,4,0.198,5,0.198,8,0.02,12,0.227,16,0.016,17,0.016,48,3.164,71,0.818,90,0.451,96,2.204,199,1.756,240,2.253,268,3.115,539,3.115,540,3.623,541,4.514,542,3.864,543,5.022,544,5.649,545,5.373,546,6.599,547,3.864,548,3.864,549,3.864,550,3.864,551,3.864,552,3.864,553,3.864,554,3.864]],["title/modules/PaginationModule.html",[18,1.234,32,2.12]],["body/modules/PaginationModule.html",[3,0.233,4,0.203,5,0.203,7,0.33,8,0.02,9,0.831,12,0.233,13,0.1,16,0.016,17,0.016,18,2.167,20,2.088,21,2.088,22,2.363,23,2.363,24,2.088,25,3.243,26,3.243,32,4.166,36,2.967,37,2.363,38,2.218,555,3.96,556,3.96,557,3.96,558,4.327,559,4.627,560,4.627]],["title/injectables/PaginationProvider.html",[87,0.649,558,2.12]],["body/injectables/PaginationProvider.html",[3,0.152,4,0.132,5,0.132,7,0.351,8,0.021,9,0.541,12,0.152,13,0.065,15,1.028,16,0.015,17,0.012,48,1.444,69,1.908,71,0.59,87,0.781,88,1.085,90,0.301,91,1.266,93,0.576,95,0.878,97,0.925,104,1.939,119,1.566,120,1.202,121,0.922,166,2.169,167,1.359,183,2.999,189,3.037,268,2.078,318,3.048,366,3.247,371,1.211,379,1.145,383,1.538,389,2.373,397,3.471,435,3.273,436,1.908,437,2.292,540,2.753,543,2.292,544,2.577,545,2.577,547,2.577,548,3.719,549,2.577,550,4.363,551,2.577,552,2.577,553,2.577,554,2.577,558,2.548,561,2.577,562,5.098,563,3.011,564,3.011,565,3.011,566,3.011,567,5.098,568,3.011,569,2.577,570,2.577,571,2.577,572,3.011,573,2.753,574,4.084,575,4.345,576,3.011,577,2.577,578,4.345,579,3.011,580,3.011,581,3.011,582,3.011,583,3.011,584,3.011,585,3.011,586,6.356,587,3.011,588,4.345,589,3.011,590,3.011,591,3.011,592,3.011,593,3.011]],["title/classes/PaginationQueryDto.html",[13,0.078,435,2.12]],["body/classes/PaginationQueryDto.html",[3,0.226,4,0.197,5,0.197,7,0.255,8,0.02,12,0.226,13,0.123,16,0.016,17,0.016,71,0.659,90,0.447,93,0.755,108,1.575,182,3.607,191,4.333,195,1.705,199,1.749,207,1.802,240,2.247,293,3.417,299,4.318,318,3.109,435,3.339,436,3.964,463,3.929,573,3.964,574,4.318,594,3.837,595,5.693,596,4.483,597,4.483,598,6.257]],["title/classes/PatchUserDto.html",[13,0.078,599,2.495]],["body/classes/PatchUserDto.html",[3,0.263,4,0.23,5,0.23,7,0.356,8,0.02,12,0.263,13,0.113,16,0.017,17,0.017,132,1.882,195,1.987,201,2.669,208,2.223,209,3.31,337,3.976,439,4.319,599,4.319,600,4.472,601,6.258,602,4.472]],["title/entities/Post.html",[124,1.054,482,1.733]],["body/entities/Post.html",[3,0.117,4,0.102,5,0.102,7,0.302,8,0.02,12,0.117,13,0.05,16,0.01,17,0.01,49,1.269,63,3.285,71,0.807,90,0.232,93,0.864,96,2.044,108,1.804,121,1.189,124,1.044,135,2.386,199,1.1,213,1.187,231,3.74,232,3.74,233,3.325,234,4.586,235,3.74,236,3.015,237,3.015,238,3.015,239,3.74,240,1.222,241,2.768,242,1.756,262,2.1,281,4.035,285,2.507,301,1.989,304,1.989,307,5.158,372,2.13,379,0.884,463,3.388,482,1.717,483,3.059,484,1.472,490,3.015,492,4.159,493,4.159,496,1.989,504,4.267,505,1.989,506,3.065,507,3.065,527,1.604,603,1.989,604,2.324,605,3.581,606,5.601,607,2.324,608,4.202,609,2.324,610,4.263,611,4.263,612,3.065,613,2.324,614,2.324,615,3.581,616,2.324,617,3.581,618,2.324,619,3.581,620,2.324,621,2.324,622,3.065,623,2.725,624,2.324,625,2.324,626,2.324,627,2.324,628,2.324,629,3.581,630,2.324,631,3.581,632,3.581,633,3.581,634,1.989,635,2.324,636,2.324,637,2.324,638,2.324]],["title/controllers/PostsController.html",[0,1.375,639,2.495]],["body/controllers/PostsController.html",[0,0.882,2,0.882,3,0.117,4,0.102,5,0.102,7,0.318,8,0.02,9,0.417,12,0.117,13,0.05,14,1.185,15,0.792,16,0.01,17,0.01,71,0.73,90,0.232,91,1.042,93,0.65,95,1.755,97,1.506,102,1.47,104,2.479,108,1.357,109,3.385,112,3.863,113,1.907,119,1.506,120,1.465,121,1.041,122,1.47,124,2.053,130,3.356,131,3.356,132,0.836,134,3.107,135,2.678,208,1.522,219,1.827,227,3.42,240,1.991,242,2.345,318,1.953,370,3.061,371,1.972,374,2.468,377,1.047,385,1.47,438,3.42,512,2.722,513,3.863,543,2.722,639,2.468,640,1.986,641,4.032,642,3.576,643,3.576,644,4.364,645,3.576,646,2.32,647,5.597,648,3.576,649,2.32,650,2.32,651,2.32,652,4.032,653,3.576,654,2.32,655,2.32,656,2.32,657,2.32,658,2.32,659,2.32,660,2.32,661,2.32,662,3.735,663,2.32,664,3.695,665,2.722,666,2.722,667,3.061,668,2.32,669,2.32,670,3.061,671,3.061,672,2.722,673,2.559,674,1.986,675,2.722,676,3.576,677,1.986,678,1.601,679,1.986,680,2.32,681,2.32,682,2.32,683,2.32,684,2.32,685,2.32,686,2.32,687,2.32,688,1.986,689,2.32,690,2.32,691,2.32]],["title/modules/PostsModule.html",[18,1.234,33,2.29]],["body/modules/PostsModule.html",[2,1.951,3,0.192,4,0.168,5,0.168,7,0.398,8,0.02,9,0.686,12,0.192,13,0.083,16,0.014,17,0.014,18,1.977,20,1.724,21,1.724,22,1.952,23,1.952,24,1.724,25,2.958,26,1.952,32,3.898,33,4.547,34,3.898,35,3.63,36,2.62,37,1.952,38,1.832,40,3.008,42,3.27,45,2.421,46,1.536,49,2.086,124,1.114,213,1.952,483,2.801,527,2.637,639,3.996,673,3.898,674,3.27,692,3.27,693,3.821,694,3.27,695,3.821,696,3.821,697,3.27,698,3.821,699,3.821,700,3.821]],["title/injectables/PostsService.html",[87,0.649,673,2.12]],["body/injectables/PostsService.html",[3,0.101,4,0.088,5,0.088,7,0.351,8,0.021,9,0.36,12,0.101,13,0.043,15,1.545,16,0.009,17,0.009,46,0.806,63,1.904,66,1.715,71,0.572,81,3.445,87,0.573,88,0.722,90,0.2,91,0.929,93,0.655,95,1.319,97,1.39,104,2.39,113,1.252,119,1.518,120,1.367,121,1.049,124,1.534,166,2.675,167,1.439,173,1.904,183,2.201,189,2.49,208,1.357,227,3.086,233,1.525,238,3.954,240,1.797,241,3.63,242,1.596,366,2.312,371,1.987,376,2.02,377,0.904,379,0.762,380,1.175,383,2.312,387,2.729,389,2.874,393,3.954,394,2.898,395,2.516,396,2.868,397,2.472,398,2.868,438,2.655,540,1.269,558,3.237,571,1.715,641,2.426,652,2.426,662,3.399,664,3.334,665,3.022,666,3.445,667,2.729,672,1.525,673,1.87,675,2.426,677,1.715,678,1.383,679,1.715,688,1.715,697,1.715,701,1.715,702,2.201,703,2.004,704,2.819,705,3.014,706,2.004,707,3.188,708,3.188,709,2.004,710,3.188,711,2.004,712,3.188,713,2.004,714,2.004,715,3.188,716,2.004,717,1.715,718,1.715,719,2.004,720,2.004,721,2.004,722,2.004,723,3.188,724,2.004,725,2.004,726,2.004,727,2.004,728,3.188,729,2.004,730,1.715,731,2.004,732,3.188,733,4.527,734,2.004,735,1.715,736,2.004,737,2.004,738,2.004,739,1.715,740,2.004,741,2.004,742,2.004,743,2.004,744,2.004,745,2.004,746,2.004,747,2.004,748,2.004,749,1.715,750,2.004,751,2.004,752,2.004,753,2.004,754,2.004,755,2.004]],["title/classes/SignInDto.html",[13,0.078,107,2.12]],["body/classes/SignInDto.html",[3,0.216,4,0.188,5,0.188,7,0.315,8,0.02,12,0.216,13,0.12,16,0.015,17,0.015,71,0.64,79,4.026,90,0.428,93,0.734,96,2.096,107,3.246,108,1.531,113,1.531,132,1.545,195,1.631,199,1.7,207,1.724,217,3.507,219,3.308,224,3.883,226,3.594,291,3.82,338,3.661,356,4.738,372,2.463,756,5.245,757,3.671,758,4.289,759,4.289,760,4.289,761,4.289,762,4.289]],["title/injectables/SignInProvider.html",[87,0.649,145,2.12]],["body/injectables/SignInProvider.html",[3,0.161,4,0.14,5,0.14,7,0.368,8,0.021,9,0.574,12,0.161,13,0.069,15,1.958,16,0.012,17,0.012,53,1.875,69,2.026,71,0.525,79,2.66,87,0.815,88,1.152,90,0.319,91,1.322,93,0.601,95,0.932,97,0.982,104,2.005,105,3.452,106,3.452,107,3.689,119,1.393,120,1.255,121,0.963,128,2.433,129,2.433,145,2.66,147,2.026,150,3.305,156,2.737,157,2.737,159,2.433,166,2.243,167,2.046,173,1.533,186,2.737,189,2.588,338,2.477,371,1.285,372,1.216,382,2.433,383,2.93,389,2.878,394,1.875,420,2.737,704,3.305,718,2.737,763,4.512,764,2.737,765,3.197,766,6.47,767,5.271,768,4.91,769,3.197,770,3.197,771,3.197,772,3.197,773,3.197,774,3.197,775,4.536,776,3.197,777,3.197,778,3.197,779,3.197,780,4.536,781,3.197,782,3.197,783,3.197,784,3.197,785,3.197,786,3.197,787,3.197,788,3.197,789,3.197,790,3.197,791,3.197,792,3.197]],["title/entities/Tag.html",[285,1.846,482,1.733]],["body/entities/Tag.html",[3,0.155,4,0.135,5,0.135,7,0.175,8,0.02,12,0.155,13,0.067,16,0.012,17,0.012,63,3.244,71,0.814,90,0.308,93,0.884,96,2.19,108,1.844,113,1.429,120,1.429,121,1.198,199,1.357,236,3.565,237,3.565,240,1.509,242,2.077,262,3.645,285,2.257,325,4.422,379,1.173,482,2.119,484,1.953,486,4.422,487,4.422,488,4.422,490,3.565,492,4.122,493,4.29,501,4.422,504,4.29,608,4.829,610,4.73,611,4.73,612,3.783,622,4.829,623,4.294,793,2.639,794,5.166,795,3.083,796,5.166,797,3.083,798,3.083,799,3.083,800,3.083,801,3.083,802,3.083,803,3.083,804,3.083]],["title/controllers/TagsController.html",[0,1.375,805,2.495]],["body/controllers/TagsController.html",[0,1.42,2,1.42,3,0.188,4,0.164,5,0.164,7,0.349,8,0.02,9,0.671,12,0.188,13,0.081,14,1.906,15,1.274,16,0.014,17,0.014,71,0.432,90,0.373,91,1.472,93,0.669,95,1.787,97,1.551,102,2.365,108,1.397,109,3.485,112,3.485,113,1.696,119,1.146,120,1.032,121,0.792,122,2.365,124,1.472,130,3.625,131,3.625,132,1.344,134,3.199,135,2.757,208,2.609,238,3.949,285,2.923,322,4.182,371,2.03,374,2.576,377,1.684,512,3.842,513,3.485,514,3.195,521,3.195,702,4.231,705,3.125,805,3.485,806,3.195,807,3.195,808,3.732,809,3.732,810,3.732,811,3.732,812,3.732,813,3.195,814,3.195,815,3.732,816,3.732,817,3.732]],["title/modules/TagsModule.html",[18,1.234,34,2.12]],["body/modules/TagsModule.html",[2,2.11,3,0.217,4,0.189,5,0.189,7,0.382,8,0.02,9,0.773,12,0.217,13,0.093,16,0.015,17,0.015,18,2.095,20,1.942,21,1.942,22,2.198,23,2.198,24,1.942,25,3.135,26,3.135,34,4.099,36,2.833,37,2.198,38,2.063,40,2.524,45,2.727,46,1.73,285,2.198,705,3.99,805,4.236,813,3.684,818,3.684,819,3.684,820,3.684,821,4.304,822,4.304,823,3.684,824,4.304]],["title/injectables/TagsService.html",[87,0.649,705,1.974]],["body/injectables/TagsService.html",[3,0.178,4,0.155,5,0.155,7,0.357,8,0.02,9,0.634,12,0.178,13,0.076,15,1.205,16,0.013,17,0.013,46,1.419,71,0.643,87,0.873,88,1.271,90,0.352,91,1.416,93,0.794,95,1.62,97,1.707,104,2.615,119,1.707,120,1.537,121,1.18,166,2.926,167,2.193,173,2.665,189,1.592,208,2.068,240,1.897,242,1.419,285,2.482,322,3.979,366,3.059,377,1.592,379,1.342,380,2.069,383,1.802,702,4.133,705,2.654,807,4.159,814,3.02,823,3.02,825,3.02,826,4.859,827,3.529,828,3.529,829,4.859,830,3.529,831,3.529,832,4.859,833,3.529,834,3.529,835,3.529,836,3.529,837,3.529,838,4.859,839,3.529]],["title/classes/UpdatePostDto.html",[13,0.078,664,2.29]],["body/classes/UpdatePostDto.html",[3,0.227,4,0.198,5,0.198,7,0.357,8,0.02,12,0.227,13,0.124,16,0.016,17,0.016,71,0.522,90,0.451,93,0.598,108,1.249,113,1.249,124,1.667,132,1.626,195,1.717,199,1.756,207,1.815,208,1.921,217,2.86,219,2.921,224,3.623,226,3.354,227,2.647,229,3.435,240,1.952,242,2.737,243,3.864,299,3.947,318,2.465,439,3.947,602,3.864,664,3.623,665,4.352,675,3.435,840,4.895,841,5.719,842,4.514]],["title/entities/User.html",[372,1.375,482,1.733]],["body/entities/User.html",[3,0.168,4,0.147,5,0.147,7,0.266,8,0.02,12,0.168,13,0.072,16,0.013,17,0.013,63,2.803,71,0.796,79,3.164,90,0.333,93,0.846,96,2.164,108,1.765,124,1.859,199,1.436,240,1.596,242,2.169,338,2.947,339,4.618,340,4.618,372,1.778,379,1.269,482,2.241,484,2.115,490,3.724,492,4.035,493,4.613,494,4.855,503,2.857,504,4.248,610,5.086,611,5.086,623,3.558,634,4.001,641,4.106,749,4.001,843,2.857,844,6.683,845,3.338,846,3.338,847,3.338,848,3.338,849,3.338,850,3.338,851,3.338]],["title/controllers/UsersController.html",[0,1.375,852,2.495]],["body/controllers/UsersController.html",[0,0.852,2,0.852,3,0.113,4,0.098,5,0.098,7,0.339,8,0.02,9,0.402,12,0.113,13,0.048,14,1.144,15,0.765,16,0.009,17,0.009,71,0.707,90,0.224,91,1.014,93,0.691,95,1.519,96,0.725,97,1.695,102,1.419,104,2.545,108,1.442,112,2.402,113,1.647,119,1.601,120,1.593,121,1.171,122,1.419,124,1.244,130,2.205,131,2.205,132,0.807,134,1.419,135,1.223,191,2.648,194,3.236,197,2.704,200,4.843,201,2.818,209,2.205,240,2.305,242,2.218,318,2.331,363,2.648,368,1.704,371,1.399,372,1.623,377,1.57,385,2.205,397,2.331,440,3.496,443,2.979,451,1.223,454,2.648,458,1.704,462,1.704,463,3.808,494,3.663,513,1.546,573,3.959,574,3.974,599,4.109,652,2.648,670,3.653,671,4.12,672,1.704,678,1.546,704,2.18,852,2.402,853,1.917,854,3.48,855,4.268,856,3.48,857,3.48,858,2.24,859,2.24,860,2.24,861,3.48,862,2.24,863,2.24,864,2.24,865,2.24,866,3.48,867,2.24,868,4.813,869,4.268,870,4.268,871,2.24,872,2.24,873,2.24,874,2.24,875,2.24,876,1.917,877,2.24,878,1.917,879,1.917,880,1.704,881,4.268,882,2.24,883,2.24,884,2.24,885,2.24,886,2.24,887,2.24,888,2.24,889,2.24,890,2.24,891,2.24,892,2.24,893,2.24,894,2.24,895,2.24,896,2.24]],["title/modules/UsersModule.html",[18,1.234,35,1.974]],["body/modules/UsersModule.html",[2,1.804,3,0.172,4,0.15,5,0.15,7,0.404,8,0.021,9,0.612,12,0.172,13,0.074,16,0.013,17,0.013,18,1.863,20,1.538,21,1.538,22,1.741,23,1.741,24,1.538,25,2.787,26,2.787,30,2.782,35,3.876,36,2.423,37,1.741,38,1.634,40,1.999,45,2.159,46,1.37,51,2.594,53,1.999,147,3.005,150,2.423,152,3.005,160,2.917,161,2.917,350,2.159,360,3.766,372,1.296,378,2.159,381,2.917,411,3.766,451,3.507,704,3.598,852,3.766,878,2.917,879,2.917,880,2.594,897,2.917,898,2.917,899,2.917,900,3.408,901,3.408,902,3.408,903,3.408,904,2.917,905,2.917,906,2.917,907,3.408,908,3.408,909,2.917,910,3.408,911,3.408]],["title/injectables/UsersService.html",[87,0.649,704,1.846]],["body/injectables/UsersService.html",[3,0.092,4,0.081,5,0.081,7,0.355,8,0.021,9,0.33,12,0.092,13,0.081,15,1.819,16,0.008,17,0.008,46,0.738,53,1.077,69,1.163,71,0.586,87,0.534,88,0.661,90,0.183,91,0.866,93,0.671,95,1.617,96,1.212,97,1.636,103,2.544,104,2.439,113,1.474,119,1.554,120,1.4,121,1.074,126,3.03,147,1.163,165,1.571,166,2.612,167,1.942,173,2.064,189,1.69,194,2.773,197,1.883,200,4.75,201,2.415,208,0.781,209,1.163,240,2.056,242,2.142,338,2.763,350,1.163,360,3.125,363,2.262,365,2.85,366,2.199,368,2.262,371,1.506,372,2.552,373,2.544,376,1.163,377,1.341,378,1.163,379,0.698,380,1.077,382,1.397,383,2.721,384,1.397,385,3.515,388,2.051,389,1.003,392,2.051,393,3.493,394,2.196,395,1.883,396,1.883,397,1.623,398,1.883,411,3.125,414,2.544,417,2.544,419,4.331,421,1.571,424,2.544,440,3.376,451,2.91,454,2.262,456,3.684,458,2.262,461,1.571,462,1.397,573,3.206,574,3.493,678,1.267,702,2.585,704,1.518,717,1.571,730,2.544,735,1.571,768,3.684,876,1.571,880,1.397,904,1.571,905,1.571,906,1.571,909,1.571,912,1.571,913,2.972,914,5.06,915,1.836,916,3.745,917,3.745,918,1.836,919,1.836,920,1.836,921,1.836,922,1.836,923,2.972,924,1.836,925,1.836,926,1.836,927,1.836,928,1.836,929,1.836,930,1.836,931,1.836,932,1.836,933,1.836,934,1.836]],["title/coverage.html",[935,3.76]],["body/coverage.html",[0,2.254,1,1.858,5,0.118,6,2.304,8,0.02,10,1.579,13,0.146,16,0.011,17,0.011,24,1.214,48,1.29,49,2.186,71,0.311,87,1.223,89,2.304,100,1.858,101,2.304,107,1.579,124,1.167,126,1.47,145,1.579,150,1.375,152,1.705,164,2.304,175,2.304,194,1.579,196,3.046,197,1.705,198,2.304,201,1.375,212,1.579,213,2.702,214,2.048,215,2.304,227,1.579,228,2.304,229,3.046,285,1.375,322,1.705,323,2.304,324,2.304,337,3.046,350,1.705,360,1.579,361,2.304,362,2.304,371,1.082,372,1.522,411,1.579,412,2.304,413,2.304,425,1.858,426,3.046,427,3.046,435,1.579,436,1.705,438,1.579,440,1.705,441,2.304,442,2.304,447,2.304,451,1.47,452,2.304,453,2.304,482,2.536,483,1.47,485,2.304,508,1.858,509,2.304,517,1.579,529,2.304,530,2.304,539,1.858,540,1.705,542,2.304,558,1.579,561,2.304,594,2.304,599,1.858,600,2.304,603,2.304,639,1.858,640,2.304,664,1.705,673,1.579,701,2.304,704,1.375,705,1.47,756,2.304,757,2.304,763,2.304,764,2.304,793,2.304,805,1.858,806,2.304,825,2.304,840,2.304,843,2.304,852,1.858,853,2.304,912,2.304,935,2.048,936,2.304,937,2.692,938,2.692,939,7.388,940,6.305,941,6.137,942,6.556,943,4.002,944,2.304,945,2.692,946,2.692,947,4.778,948,4.778,949,4.002,950,4.002,951,2.692,952,2.692,953,2.692,954,2.692]],["title/dependencies.html",[21,1.963,955,2.581]],["body/dependencies.html",[8,0.02,9,0.865,13,0.129,16,0.016,17,0.016,21,2.173,46,1.936,53,2.825,159,3.665,187,4.122,207,1.936,210,3.324,379,1.832,569,4.122,570,4.122,956,6.465,957,4.816,958,5.956,959,4.816,960,4.816,961,4.816,962,4.816,963,4.816,964,4.816,965,4.816,966,4.816,967,4.816,968,4.816,969,4.816,970,4.816,971,4.816,972,4.816]],["title/miscellaneous/enumerations.html",[973,2.081,974,3.723]],["body/miscellaneous/enumerations.html",[8,0.02,16,0.016,17,0.016,90,0.484,124,1.744,182,4.593,234,4.553,281,4.553,312,5.121,573,3.791,973,3.349,974,4.153,975,5.983,976,6.487,977,4.852,978,5.983,979,5.983,980,5.983,981,5.983,982,5.983]],["title/miscellaneous/functions.html",[973,2.081,983,3.723]],["body/miscellaneous/functions.html",[8,0.018,16,0.018,17,0.018,24,3.12,90,0.562,944,4.823,973,3.889,983,4.823,984,5.635]],["title/index.html",[90,0.301,985,3.015,986,3.015]],["body/index.html",[4,0.123,8,0.019,16,0.011,17,0.011,38,2.883,113,0.775,219,2.756,241,1.776,366,1.431,402,3.529,577,2.399,666,2.133,739,2.399,935,2.133,936,3.529,987,2.802,988,2.802,989,4.892,990,4.123,991,2.802,992,2.802,993,2.802,994,2.802,995,4.123,996,4.892,997,2.802,998,2.802,999,5.395,1000,2.802,1001,6.379,1002,2.802,1003,6.217,1004,2.802,1005,2.802,1006,2.802,1007,4.123,1008,2.802,1009,4.123,1010,2.802,1011,4.892,1012,2.802,1013,4.123,1014,2.802,1015,2.802,1016,2.802,1017,2.802,1018,2.802,1019,5.395,1020,6.379,1021,6.013,1022,2.802,1023,4.123,1024,2.802,1025,2.802,1026,2.802,1027,2.802,1028,6.013,1029,4.123,1030,5.395,1031,2.802,1032,4.123,1033,2.802,1034,2.802,1035,4.123,1036,6.013,1037,5.395,1038,2.802,1039,4.123,1040,2.802,1041,2.802,1042,2.802,1043,2.802,1044,5.395,1045,2.802,1046,2.802,1047,2.802,1048,2.802,1049,4.123,1050,2.802,1051,2.802,1052,2.802,1053,2.802,1054,2.802,1055,4.123,1056,2.802,1057,2.802,1058,2.802,1059,4.123,1060,2.802,1061,2.802,1062,4.618,1063,2.802,1064,2.802,1065,2.802,1066,2.802,1067,2.802,1068,2.802,1069,2.802,1070,2.802,1071,4.123,1072,2.802,1073,2.802,1074,2.802,1075,2.802,1076,4.892,1077,2.802,1078,2.802,1079,2.802,1080,2.802,1081,2.802,1082,4.123,1083,2.802,1084,2.802,1085,2.802,1086,2.802,1087,4.123,1088,2.802,1089,2.802,1090,2.802,1091,4.123,1092,4.123,1093,2.802,1094,2.802,1095,2.802,1096,2.802,1097,2.802,1098,2.802,1099,2.802,1100,2.802,1101,2.802,1102,2.802,1103,2.802,1104,2.802,1105,2.802,1106,2.802,1107,2.802,1108,2.802,1109,2.802,1110,2.399]],["title/modules.html",[20,2.229]],["body/modules.html",[8,0.017,16,0.017,17,0.017,19,3.466,20,2.266,30,2.945,31,3.182,32,2.945,33,3.182,34,2.945,35,2.743,1062,6.188,1111,7.229,1112,7.229,1113,7.229]],["title/overview.html",[1114,4.229]],["body/overview.html",[2,1.216,8,0.02,10,3.091,16,0.012,17,0.012,18,1.091,19,4.939,20,1.443,21,1.443,22,1.633,23,1.633,24,1.443,25,1.633,26,1.633,27,2.737,28,2.737,29,2.737,30,3.877,31,3.837,32,3.794,33,4.37,34,3.794,35,3.835,36,2.317,37,1.633,38,1.533,88,1.152,126,3.533,142,2.737,143,2.737,144,2.737,145,3.091,195,1.216,318,1.746,360,3.091,411,3.091,451,2.878,484,2.026,517,3.091,523,2.737,524,2.737,539,2.207,555,2.737,556,2.737,557,2.737,558,3.794,673,3.091,692,2.737,694,2.737,704,3.305,705,3.533,818,2.737,819,2.737,820,2.737,897,2.737,898,2.737,899,2.737,1114,2.737,1115,3.197,1116,3.197,1117,3.197,1118,3.197,1119,3.197]],["title/properties.html",[199,1.336,955,2.581]],["body/properties.html",[8,0.02,16,0.018,17,0.018,113,1.539,199,1.708,241,3.524,1110,4.761,1120,5.562,1121,5.562,1122,5.562]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUserParamDto.html":{},"injectables/HashingProvider.html":{},"injectables/ManyUsersProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":939,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":1121,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":962,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":969,"title":{},"body":{"dependencies.html":{}}}],["0.3.22",{"_index":972,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":961,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":940,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":946,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":941,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":942,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":943,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":947,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":948,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":265,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":318,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"controllers/PostsController.html":{},"classes/UpdatePostDto.html":{},"controllers/UsersController.html":{},"overview.html":{}}}],["1/3",{"_index":950,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":191,"title":{},"body":{"injectables/BcryptProvider.html":{},"classes/PaginationQueryDto.html":{},"controllers/UsersController.html":{}}}],["10.'})@apiquery({name",{"_index":871,"title":{},"body":{"controllers/UsersController.html":{}}}],["1024",{"_index":612,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["11.0.0",{"_index":958,"title":{},"body":{"dependencies.html":{}}}],["11.0.1",{"_index":956,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":1119,"title":{},"body":{"overview.html":{}}}],["1234",{"_index":446,"title":{},"body":{"classes/GetUserParamDto.html":{}}}],["1234'})@isoptional()@isint()@type(undefined",{"_index":444,"title":{},"body":{"classes/GetUserParamDto.html":{}}}],["13",{"_index":1118,"title":{},"body":{"overview.html":{}}}],["17.13.3",{"_index":964,"title":{},"body":{"dependencies.html":{}}}],["1})@isint()@isnotempty",{"_index":243,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{}}}],["2",{"_index":319,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["200",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":512,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{}}}],["2024",{"_index":264,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["20t10:00:00z",{"_index":317,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["20t10:00:00z'})@isiso8601()@isoptional",{"_index":266,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["256",{"_index":622,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["3",{"_index":320,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["30",{"_index":629,"title":{},"body":{"entities/Post.html":{}}}],["33",{"_index":949,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":1117,"title":{},"body":{"overview.html":{}}}],["4.0.2",{"_index":957,"title":{},"body":{"dependencies.html":{}}}],["401",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{}}}],["5.1.1",{"_index":960,"title":{},"body":{"dependencies.html":{}}}],["5/7",{"_index":952,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":1116,"title":{},"body":{"overview.html":{}}}],["7",{"_index":1115,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":971,"title":{},"body":{"dependencies.html":{}}}],["71",{"_index":951,"title":{},"body":{"coverage.html":{}}}],["8.14.1",{"_index":966,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":273,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["96",{"_index":844,"title":{},"body":{"entities/User.html":{}}}],["abstract",{"_index":448,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["accesstoken",{"_index":780,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["address",{"_index":405,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["allowing",{"_index":1050,"title":{},"body":{"index.html":{}}}],["already",{"_index":400,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["amazing",{"_index":1097,"title":{},"body":{"index.html":{}}}],["amount",{"_index":869,"title":{},"body":{"controllers/UsersController.html":{}}}],["apioperation",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{}}}],["apiparam",{"_index":676,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":224,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/SignInDto.html":{},"classes/UpdatePostDto.html":{}}}],["apiproperty()@isstring()@minlength(3)@maxlength(256)@isnotempty",{"_index":330,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiproperty({description",{"_index":217,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/SignInDto.html":{},"classes/UpdatePostDto.html":{}}}],["apiproperty({enum",{"_index":259,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":303,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUserParamDto.html":{}}}],["apipropertyoptional()@isjson()@isoptional",{"_index":332,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional()@isstring()@isoptional",{"_index":326,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional()@isurl()@isoptional()@maxlength(1024",{"_index":328,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional({description",{"_index":245,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamDto.html":{}}}],["apipropertyoptional({type",{"_index":254,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":881,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["app.controller",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appconfig",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1021,"title":{},"body":{"index.html":{}}}],["applications",{"_index":995,"title":{},"body":{"index.html":{}}}],["apply",{"_index":747,"title":{},"body":{"injectables/PostsService.html":{}}}],["appmodule",{"_index":19,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":284,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["async",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/ManyUsersProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["audience",{"_index":789,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["auth",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UsersService.html":{}}}],["auth.controller",{"_index":148,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":100,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":30,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":241,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"index.html":{},"properties.html":{}}}],["authorid",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["authservice",{"_index":126,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":389,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/ManyUsersProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/SignInProvider.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":1039,"title":{},"body":{"index.html":{}}}],["backers",{"_index":1098,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":375,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/ManyUsersProvider.html":{}}}],["based",{"_index":1034,"title":{},"body":{"index.html":{}}}],["baseurl",{"_index":578,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["baseurl}${newurl.pathname}?page=${nextpage}&limit=${limit",{"_index":592,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["baseurl}${newurl.pathname}?page=${paginationquery.page}&limit=${limit",{"_index":591,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["baseurl}${newurl.pathname}?page=${previouspage}&limit=${limit",{"_index":590,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["baseurl}${newurl.pathname}?page=${totalpages}&limit=${limit",{"_index":593,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["baseurl}${newurl.pathname}?page=1&limit=${limit",{"_index":589,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["bcrypt",{"_index":187,"title":{},"body":{"injectables/BcryptProvider.html":{},"dependencies.html":{}}}],["bcrypt.compare(value",{"_index":193,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.hash(value",{"_index":192,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcryptprovider",{"_index":152,"title":{"injectables/BcryptProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["board",{"_index":1090,"title":{},"body":{"index.html":{}}}],["body",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["both",{"_index":738,"title":{},"body":{"injectables/PostsService.html":{}}}],["browse",{"_index":1113,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1111,"title":{},"body":{"modules.html":{}}}],["buffer",{"_index":179,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["building",{"_index":990,"title":{},"body":{"index.html":{}}}],["cascade",{"_index":507,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["cascade'})@joincolumn",{"_index":499,"title":{},"body":{"entities/MetaOption.html":{}}}],["catch",{"_index":392,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/ManyUsersProvider.html":{},"injectables/UsersService.html":{}}}],["catch((error",{"_index":732,"title":{},"body":{"injectables/PostsService.html":{}}}],["cause",{"_index":398,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/ManyUsersProvider.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["channel",{"_index":1064,"title":{},"body":{"index.html":{}}}],["character",{"_index":354,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":1028,"title":{},"body":{"index.html":{}}}],["class",{"_index":13,"title":{"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUserParamDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchUserDto.html":{},"classes/SignInDto.html":{},"classes/UpdatePostDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUserParamDto.html":{},"injectables/HashingProvider.html":{},"injectables/ManyUsersProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":195,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUserParamDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchUserDto.html":{},"classes/SignInDto.html":{},"classes/UpdatePostDto.html":{},"overview.html":{}}}],["clicks",{"_index":1049,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":1033,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":142,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":143,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":144,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":523,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":524,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_paginationmodule",{"_index":555,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_exports",{"_index":557,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_providers",{"_index":556,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":692,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":693,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":694,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":818,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_exports",{"_index":819,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":820,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":897,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":899,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":898,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":504,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["column({type",{"_index":492,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["come",{"_index":1056,"title":{},"body":{"index.html":{}}}],["common/pagination/pagination.module",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["compare",{"_index":176,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["compare(value",{"_index":178,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["complete",{"_index":477,"title":{},"body":{"injectables/ManyUsersProvider.html":{}}}],["config/app.config",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["config/env.validation",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["config/jwt.config",{"_index":157,"title":{},"body":{"modules/AuthModule.html":{},"injectables/SignInProvider.html":{}}}],["config/profile.config",{"_index":906,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["configmodule",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":162,"title":{},"body":{"modules/AuthModule.html":{}}}],["configmodule.forfeature(profileconfig",{"_index":911,"title":{},"body":{"modules/UsersModule.html":{}}}],["configmodule.forroot",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.autoloadentities",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.database",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.host",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.password",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.port",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.username",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":768,"title":{},"body":{"injectables/SignInProvider.html":{},"injectables/UsersService.html":{}}}],["conflictexception",{"_index":460,"title":{},"body":{"injectables/ManyUsersProvider.html":{}}}],["conflictexception('could",{"_index":476,"title":{},"body":{"injectables/ManyUsersProvider.html":{}}}],["connecting",{"_index":399,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["connection",{"_index":733,"title":{},"body":{"injectables/PostsService.html":{}}}],["const",{"_index":189,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/ManyUsersProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/ManyUsersProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["constructor(@inject(request",{"_index":572,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["constructor(authservice",{"_index":915,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(datasource",{"_index":455,"title":{},"body":{"injectables/ManyUsersProvider.html":{}}}],["constructor(hashingprovider",{"_index":364,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["constructor(metaoptionsrepository",{"_index":531,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(postrepository",{"_index":703,"title":{},"body":{"injectables/PostsService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ManyUsersProvider.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["constructor(request",{"_index":563,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["constructor(signinprovider",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(tagrepository",{"_index":827,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(userrepository",{"_index":415,"title":{},"body":{"injectables/FindOneByEmailProvider.html":{}}}],["constructor(usersservice",{"_index":765,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["contain",{"_index":275,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["content",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('meta",{"_index":520,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('posts",{"_index":680,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('tags",{"_index":815,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('users",{"_index":882,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["courses",{"_index":1070,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":935,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":208,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"injectables/CreateUserProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/UpdatePostDto.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":521,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/TagsController.html":{}}}],["create(createmetaoptiondto",{"_index":510,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["create(createmetaoptionsdto",{"_index":534,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["create(createpostdto",{"_index":708,"title":{},"body":{"injectables/PostsService.html":{}}}],["create(createtagdto",{"_index":807,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["created",{"_index":374,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{}}}],["created.'})@post",{"_index":514,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/TagsController.html":{}}}],["createdat",{"_index":486,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createdatecolumn",{"_index":488,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createmanyusers",{"_index":454,"title":{},"body":{"injectables/ManyUsersProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createmanyusers(@body",{"_index":895,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusers(createmanyusersdto",{"_index":458,"title":{},"body":{"injectables/ManyUsersProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createmanyusersdto",{"_index":194,"title":{"classes/CreateManyUsersDto.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"injectables/ManyUsersProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createmanyusersdto.users",{"_index":469,"title":{},"body":{"injectables/ManyUsersProvider.html":{}}}],["createmetaoptiondto",{"_index":516,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptionsdto",{"_index":212,"title":{"classes/CreateMetaOptionsDto.html":{}},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["createpost",{"_index":642,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(@body",{"_index":684,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":646,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":227,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["createpostdto})@post",{"_index":649,"title":{},"body":{"controllers/PostsController.html":{}}}],["creates",{"_index":370,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/PostsController.html":{}}}],["createtagdto",{"_index":322,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["createuser",{"_index":363,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuser(@body",{"_index":891,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(createuserdto",{"_index":368,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuserdto",{"_index":201,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":391,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["createuserprovider",{"_index":360,"title":{"injectables/CreateUserProvider.html":{}},"body":{"injectables/CreateUserProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["creating",{"_index":410,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["credentials",{"_index":779,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["current",{"_index":552,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["currentpage",{"_index":549,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["data",{"_index":543,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{}}}],["data'})@apiresponse({status",{"_index":648,"title":{},"body":{"controllers/PostsController.html":{}}}],["database",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{}}}],["databaseconfig",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["datasource",{"_index":456,"title":{},"body":{"injectables/ManyUsersProvider.html":{},"injectables/UsersService.html":{}}}],["date",{"_index":262,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["datesource",{"_index":917,"title":{},"body":{"injectables/UsersService.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUserParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PaginationQueryDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":1066,"title":{},"body":{"index.html":{}}}],["default",{"_index":463,"title":{},"body":{"injectables/ManyUsersProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Post.html":{},"controllers/UsersController.html":{}}}],["defaultvaluepipe",{"_index":875,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":887,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":885,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":93,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUserParamDto.html":{},"injectables/HashingProvider.html":{},"injectables/ManyUsersProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":652,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["delete('/:id",{"_index":861,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':id",{"_index":689,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete(id",{"_index":710,"title":{},"body":{"injectables/PostsService.html":{}}}],["deleted",{"_index":688,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deleted.'})@apiparam({name",{"_index":655,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletedat",{"_index":794,"title":{},"body":{"entities/Tag.html":{}}}],["deletedatecolumn",{"_index":796,"title":{},"body":{"entities/Tag.html":{}}}],["deletepost",{"_index":643,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(@param('id",{"_index":690,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(id",{"_index":651,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletes",{"_index":653,"title":{},"body":{"controllers/PostsController.html":{}}}],["deleteuser",{"_index":854,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuser(@param('id",{"_index":894,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuser(id",{"_index":860,"title":{},"body":{"controllers/UsersController.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":1019,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1038,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1029,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":1048,"title":{},"body":{"index.html":{}}}],["description",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"classes/GetUserParamDto.html":{},"injectables/ManyUsersProvider.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"classes/UpdatePostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":1004,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":1078,"title":{},"body":{"index.html":{}}}],["different",{"_index":404,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["discord",{"_index":1063,"title":{},"body":{"index.html":{}}}],["dive",{"_index":1065,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":936,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["draft",{"_index":312,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["draft'})@isenum(poststatus",{"_index":282,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dto",{"_index":373,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UsersService.html":{}}}],["dtos/create",{"_index":377,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/ManyUsersProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/enums/create",{"_index":635,"title":{},"body":{"entities/Post.html":{}}}],["dtos/get",{"_index":678,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":877,"title":{},"body":{"controllers/UsersController.html":{}}}],["dtos/sign",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["dtos/update",{"_index":677,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["e2e",{"_index":1014,"title":{},"body":{"index.html":{}}}],["each",{"_index":211,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["eager",{"_index":606,"title":{},"body":{"entities/Post.html":{}}}],["efficient",{"_index":991,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":1026,"title":{},"body":{"index.html":{}}}],["email",{"_index":338,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["email.provider",{"_index":909,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["email.provider.ts",{"_index":413,"title":{},"body":{"injectables/FindOneByEmailProvider.html":{},"coverage.html":{}}}],["email.provider.ts:18",{"_index":418,"title":{},"body":{"injectables/FindOneByEmailProvider.html":{}}}],["email.provider.ts:7",{"_index":416,"title":{},"body":{"injectables/FindOneByEmailProvider.html":{}}}],["enddate",{"_index":428,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{}}}],["ensure",{"_index":1024,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":1081,"title":{},"body":{"index.html":{}}}],["entities",{"_index":484,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":482,"title":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"coverage.html":{}}}],["enum",{"_index":307,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enumerations",{"_index":974,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/create",{"_index":300,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["env.development",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["envvalidationschema",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["err",{"_index":468,"title":{},"body":{"injectables/ManyUsersProvider.html":{}}}],["error",{"_index":393,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["example",{"_index":219,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUserParamDto.html":{},"controllers/PostsController.html":{},"classes/SignInDto.html":{},"classes/UpdatePostDto.html":{},"index.html":{}}}],["exist",{"_index":423,"title":{},"body":{"injectables/FindOneByEmailProvider.html":{}}}],["existinguser",{"_index":386,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["exists",{"_index":401,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["experience",{"_index":1068,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":787,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUserParamDto.html":{},"injectables/HashingProvider.html":{},"injectables/ManyUsersProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":569,"title":{},"body":{"injectables/PaginationProvider.html":{},"dependencies.html":{}}}],["extends",{"_index":439,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/PatchUserDto.html":{},"classes/UpdatePostDto.html":{}}}],["false",{"_index":494,"title":{},"body":{"entities/MetaOption.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["fast",{"_index":1042,"title":{},"body":{"index.html":{}}}],["feature",{"_index":248,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featuredimageurl",{"_index":325,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["featureimageurl",{"_index":232,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["features",{"_index":1052,"title":{},"body":{"index.html":{}}}],["fetched",{"_index":866,"title":{},"body":{"controllers/UsersController.html":{}}}],["few",{"_index":1044,"title":{},"body":{"index.html":{}}}],["fields",{"_index":751,"title":{},"body":{"injectables/PostsService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUserParamDto.html":{},"injectables/HashingProvider.html":{},"injectables/ManyUsersProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["finally",{"_index":480,"title":{},"body":{"injectables/ManyUsersProvider.html":{}}}],["finalresponse",{"_index":588,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["find",{"_index":927,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall",{"_index":702,"title":{},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["findall(getuserparamdto",{"_index":921,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(postquery",{"_index":712,"title":{},"body":{"injectables/PostsService.html":{}}}],["finding",{"_index":424,"title":{},"body":{"injectables/FindOneByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["findmultipletags",{"_index":826,"title":{},"body":{"injectables/TagsService.html":{}}}],["findmultipletags(tagids",{"_index":832,"title":{},"body":{"injectables/TagsService.html":{}}}],["findmultipletags(updatepostdto.tags",{"_index":743,"title":{},"body":{"injectables/PostsService.html":{}}}],["findone",{"_index":730,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findone(id",{"_index":923,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyemail",{"_index":414,"title":{},"body":{"injectables/FindOneByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["findonebyemail(email",{"_index":417,"title":{},"body":{"injectables/FindOneByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["findonebyemailprovider",{"_index":411,"title":{"injectables/FindOneByEmailProvider.html":{}},"body":{"injectables/FindOneByEmailProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["finds",{"_index":419,"title":{},"body":{"injectables/FindOneByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["first",{"_index":268,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["firstname",{"_index":339,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["focus",{"_index":1051,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1084,"title":{},"body":{"index.html":{}}}],["footeractive",{"_index":221,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{}}}],["forwardref",{"_index":147,"title":{},"body":{"modules/AuthModule.html":{},"injectables/CreateUserProvider.html":{},"injectables/SignInProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["found",{"_index":735,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":989,"title":{},"body":{"index.html":{}}}],["full",{"_index":1080,"title":{},"body":{"index.html":{}}}],["function",{"_index":945,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":983,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1047,"title":{},"body":{"index.html":{}}}],["get('{/:id",{"_index":883,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('{/:id}')@apioperation({summary",{"_index":864,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('{/:userid",{"_index":681,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":92,"title":{},"body":{"injectables/AppService.html":{}}}],["getposts",{"_index":644,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":658,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostsbasedto",{"_index":425,"title":{"classes/GetPostsBaseDto.html":{}},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"coverage.html":{}}}],["getpostsdto",{"_index":438,"title":{"classes/GetPostsDto.html":{}},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["getting",{"_index":985,"title":{"index.html":{}},"body":{}}],["getuserparamdto",{"_index":440,"title":{"classes/GetUserParamDto.html":{}},"body":{"classes/GetUserParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["getuserparamdto.id",{"_index":888,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers",{"_index":855,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getuserparamdto",{"_index":863,"title":{},"body":{"controllers/UsersController.html":{}}}],["given",{"_index":647,"title":{},"body":{"controllers/PostsController.html":{}}}],["graph",{"_index":1073,"title":{},"body":{"index.html":{}}}],["grow",{"_index":1094,"title":{},"body":{"index.html":{}}}],["handles",{"_index":913,"title":{},"body":{"injectables/UsersService.html":{}}}],["hands",{"_index":1067,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1057,"title":{},"body":{"index.html":{}}}],["hash",{"_index":177,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hash(value",{"_index":184,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashedpassword",{"_index":406,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["hashedvalue",{"_index":180,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashing.provider",{"_index":186,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/SignInProvider.html":{}}}],["hashingprovider",{"_index":150,"title":{"injectables/HashingProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"injectables/SignInProvider.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["hello",{"_index":98,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":1071,"title":{},"body":{"index.html":{}}}],["here",{"_index":1102,"title":{},"body":{"index.html":{}}}],["hey\":\"world\"}'})@isjson()@isoptional",{"_index":246,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["hey\\\":\\\"world",{"_index":314,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["host",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["httpcode",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://example.com/feature",{"_index":251,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://nestjs.com",{"_index":1107,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{}}}],["hyphens",{"_index":310,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["hyphens'})@maxlength(256",{"_index":279,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["id",{"_index":242,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["id'})@apiresponse({status",{"_index":654,"title":{},"body":{"controllers/PostsController.html":{}}}],["identifier",{"_index":937,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":286,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["image",{"_index":249,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["image.jpg",{"_index":315,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["image.jpg'})@isurl()@maxlength(1024)@isoptional",{"_index":252,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["implements",{"_index":188,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUserParamDto.html":{},"injectables/HashingProvider.html":{},"injectables/ManyUsersProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["in')@httpcode(httpstatus.ok",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["in'})@apiresponse({status",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{}}}],["in(tagids",{"_index":839,"title":{},"body":{"injectables/TagsService.html":{}}}],["in.dto",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["in.dto.ts",{"_index":757,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["in.dto.ts:11",{"_index":759,"title":{},"body":{"classes/SignInDto.html":{}}}],["in.dto.ts:19",{"_index":761,"title":{},"body":{"classes/SignInDto.html":{}}}],["in.provider",{"_index":155,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["in.provider.ts",{"_index":764,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["in.provider.ts:15",{"_index":769,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["in.provider.ts:30",{"_index":770,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["index",{"_index":90,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUserParamDto.html":{},"injectables/HashingProvider.html":{},"injectables/ManyUsersProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUserParamDto.html":{},"injectables/HashingProvider.html":{},"injectables/ManyUsersProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":1031,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":1054,"title":{},"body":{"index.html":{}}}],["inject",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"injectables/CreateUserProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":382,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UsersService.html":{}}}],["inject(hashingprovider",{"_index":771,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["inject(jwtconfig.key",{"_index":773,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["inject(jwtservice",{"_index":772,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["inject(profileconfig.key",{"_index":928,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectable",{"_index":87,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/HashingProvider.html":{},"injectables/ManyUsersProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/HashingProvider.html":{},"injectables/ManyUsersProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":88,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/HashingProvider.html":{},"injectables/ManyUsersProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":380,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(metaoption",{"_index":536,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["injectrepository(post",{"_index":721,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(tag",{"_index":835,"title":{},"body":{"injectables/TagsService.html":{}}}],["injectrepository(user",{"_index":384,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["install",{"_index":1046,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":1002,"title":{},"body":{"index.html":{}}}],["interact",{"_index":1074,"title":{},"body":{"index.html":{}}}],["interface",{"_index":539,"title":{"interfaces/Paginated.html":{}},"body":{"interfaces/Paginated.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":541,"title":{},"body":{"interfaces/Paginated.html":{}}}],["intersectiontype",{"_index":434,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{}}}],["isarray",{"_index":205,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["isarray()@validatenested({each",{"_index":202,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["isauthenticated",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["isdate",{"_index":433,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{}}}],["isdate()@isoptional",{"_index":430,"title":{},"body":{"classes/GetPostsBaseDto.html":{}}}],["isemail",{"_index":356,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["isemail()@maxlength(96",{"_index":341,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":292,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":313,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":308,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isglobal",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":299,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamDto.html":{},"classes/PaginationQueryDto.html":{},"classes/UpdatePostDto.html":{}}}],["isint()@isoptional()@ispositive",{"_index":595,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isiso8601",{"_index":298,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":225,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["isnotempty",{"_index":226,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/SignInDto.html":{},"classes/UpdatePostDto.html":{}}}],["isoptional",{"_index":293,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUserParamDto.html":{},"classes/PaginationQueryDto.html":{}}}],["ispasswordvalid",{"_index":775,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["ispositive",{"_index":598,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isstring",{"_index":291,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":343,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":345,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@minlength(8)@isnotempty()@matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":347,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["issuer",{"_index":791,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["isurl",{"_index":294,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["itemsperpage",{"_index":547,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["job",{"_index":1087,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1089,"title":{},"body":{"index.html":{}}}],["joi",{"_index":963,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":1100,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":505,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["jointable",{"_index":631,"title":{},"body":{"entities/Post.html":{}}}],["json",{"_index":321,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{}}}],["jwtconfig",{"_index":156,"title":{},"body":{"modules/AuthModule.html":{},"injectables/SignInProvider.html":{}}}],["jwtconfiguration",{"_index":767,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["jwtmodule",{"_index":158,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync(jwtconfig.asprovider",{"_index":163,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":766,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["kamil",{"_index":1104,"title":{},"body":{"index.html":{}}}],["key",{"_index":1022,"title":{},"body":{"index.html":{}}}],["last",{"_index":554,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["lastname",{"_index":340,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["learn",{"_index":1060,"title":{},"body":{"index.html":{}}}],["legend",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":611,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["letter",{"_index":352,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":277,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["license",{"_index":1110,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1092,"title":{},"body":{"index.html":{}}}],["limit",{"_index":574,"title":{},"body":{"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["linkedin",{"_index":1086,"title":{},"body":{"index.html":{}}}],["links",{"_index":544,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["literal",{"_index":546,"title":{},"body":{"interfaces/Paginated.html":{}}}],["load",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"injectables/PostsService.html":{}}}],["looking",{"_index":1032,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1083,"title":{},"body":{"index.html":{}}}],["lowercase",{"_index":276,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["makes",{"_index":1040,"title":{},"body":{"index.html":{}}}],["managing",{"_index":1053,"title":{},"body":{"index.html":{}}}],["many",{"_index":197,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"injectables/ManyUsersProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["manytomany",{"_index":632,"title":{},"body":{"entities/Post.html":{}}}],["manytomany(undefined",{"_index":626,"title":{},"body":{"entities/Post.html":{}}}],["manytoone",{"_index":633,"title":{},"body":{"entities/Post.html":{}}}],["manytoone(undefined",{"_index":604,"title":{},"body":{"entities/Post.html":{}}}],["manyusersprovider",{"_index":451,"title":{"injectables/ManyUsersProvider.html":{}},"body":{"injectables/ManyUsersProvider.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["matches",{"_index":297,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":359,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":309,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matching",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUserParamDto.html":{},"injectables/HashingProvider.html":{},"injectables/ManyUsersProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["math.ceil(totalitems",{"_index":584,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["mau",{"_index":1036,"title":{},"body":{"index.html":{}}}],["maxlength",{"_index":296,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(1024",{"_index":316,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(256",{"_index":311,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(30",{"_index":306,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["maxlength(96",{"_index":357,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":274,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["meta",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"coverage.html":{}}}],["metadata",{"_index":968,"title":{},"body":{"dependencies.html":{}}}],["metaoption",{"_index":483,"title":{"entities/MetaOption.html":{}},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["metaoption.post",{"_index":615,"title":{},"body":{"entities/Post.html":{}}}],["metaoptions",{"_index":233,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{}}}],["metaoptionscontroller",{"_index":508,"title":{"controllers/MetaOptionsController.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionsmodule",{"_index":31,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules.html":{},"overview.html":{}}}],["metaoptionsrepository",{"_index":533,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["metaoptionsservice",{"_index":517,"title":{"injectables/MetaOptionsService.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["metavalue",{"_index":216,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"entities/MetaOption.html":{}}}],["methods",{"_index":91,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/HashingProvider.html":{},"injectables/ManyUsersProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":295,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":336,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":305,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":358,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":973,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":1091,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1007,"title":{},"body":{"index.html":{}}}],["module",{"_index":18,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":1030,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":1105,"title":{},"body":{"index.html":{}}}],["name",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateTagDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/HashingProvider.html":{},"injectables/ManyUsersProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":739,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["nest",{"_index":996,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1109,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":1020,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/HashingProvider.html":{},"injectables/ManyUsersProvider.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/SignInProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":570,"title":{},"body":{"injectables/PaginationProvider.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":159,"title":{},"body":{"modules/AuthModule.html":{},"injectables/SignInProvider.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":959,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUserParamDto.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"classes/SignInDto.html":{},"controllers/TagsController.html":{},"classes/UpdatePostDto.html":{},"controllers/UsersController.html":{}}}],["nestjs/typeorm",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":371,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/ManyUsersProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newurl",{"_index":581,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newuser",{"_index":470,"title":{},"body":{"injectables/ManyUsersProvider.html":{}}}],["newusers",{"_index":464,"title":{},"body":{"injectables/ManyUsersProvider.html":{}}}],["newusers.push(newuser",{"_index":473,"title":{},"body":{"injectables/ManyUsersProvider.html":{}}}],["next",{"_index":553,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["nextpage",{"_index":585,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["node.js",{"_index":988,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":717,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('post",{"_index":734,"title":{},"body":{"injectables/PostsService.html":{}}}],["notfoundexception('user",{"_index":933,"title":{},"body":{"injectables/UsersService.html":{}}}],["npm",{"_index":1001,"title":{},"body":{"index.html":{}}}],["null",{"_index":387,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{}}}],["nullable",{"_index":493,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["number",{"_index":240,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["numbers",{"_index":278,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["number})@delete(':id",{"_index":656,"title":{},"body":{"controllers/PostsController.html":{}}}],["object",{"_index":255,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["object.assign(post",{"_index":752,"title":{},"body":{"injectables/PostsService.html":{}}}],["objectliteral",{"_index":568,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["offer",{"_index":1088,"title":{},"body":{"index.html":{}}}],["official",{"_index":1037,"title":{},"body":{"index.html":{}}}],["ondelete",{"_index":498,"title":{},"body":{"entities/MetaOption.html":{}}}],["one",{"_index":350,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/FindOneByEmailProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["onetomany",{"_index":634,"title":{},"body":{"entities/Post.html":{},"entities/User.html":{}}}],["onetomany(undefined",{"_index":850,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":506,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onetoone(undefined",{"_index":496,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["open",{"_index":1093,"title":{},"body":{"index.html":{}}}],["option",{"_index":218,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{}}}],["option'})@apiresponse({status",{"_index":511,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["option.entity",{"_index":527,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{}}}],["option.entity.ts",{"_index":485,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["option.entity.ts:15",{"_index":491,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:21",{"_index":495,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:24",{"_index":489,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:27",{"_index":502,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:31",{"_index":500,"title":{},"body":{"entities/MetaOption.html":{}}}],["optional",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUserParamDto.html":{},"injectables/HashingProvider.html":{},"injectables/ManyUsersProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":256,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{}}}],["options.controller",{"_index":526,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":509,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:13",{"_index":515,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.dto",{"_index":302,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["options.dto.ts",{"_index":215,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:11",{"_index":223,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{}}}],["options.module",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["options.module.ts",{"_index":525,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.service",{"_index":519,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["options.service.ts",{"_index":530,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["options.service.ts:14",{"_index":535,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options.service.ts:8",{"_index":532,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options/dtos/create",{"_index":214,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"coverage.html":{}}}],["options/meta",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["options/providers/meta",{"_index":529,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["out",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":1114,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":955,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":573,"title":{},"body":{"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["paginated",{"_index":540,"title":{"interfaces/Paginated.html":{}},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["paginatequery",{"_index":562,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginatequery(paginationquery",{"_index":565,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationmodule",{"_index":32,"title":{"modules/PaginationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["paginationprovider",{"_index":558,"title":{"injectables/PaginationProvider.html":{}},"body":{"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["paginationquery",{"_index":567,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquery.page",{"_index":586,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquerydto",{"_index":435,"title":{"classes/PaginationQueryDto.html":{}},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["parallel",{"_index":737,"title":{},"body":{"injectables/PostsService.html":{}}}],["param",{"_index":385,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param('userid",{"_index":682,"title":{},"body":{"controllers/PostsController.html":{}}}],["param.dto",{"_index":876,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto.ts",{"_index":442,"title":{},"body":{"classes/GetUserParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:13",{"_index":445,"title":{},"body":{"classes/GetUserParamDto.html":{}}}],["parameters",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/HashingProvider.html":{},"injectables/ManyUsersProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parseintpipe",{"_index":671,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["part",{"_index":1079,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":602,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UpdatePostDto.html":{}}}],["partialtype(createpostdto",{"_index":841,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["partialtype(createuserdto",{"_index":601,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["password",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{}}}],["password'})@isstring()@isnotempty",{"_index":760,"title":{},"body":{"classes/SignInDto.html":{}}}],["patch",{"_index":670,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":599,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["pg",{"_index":965,"title":{},"body":{"dependencies.html":{}}}],["platform",{"_index":1035,"title":{},"body":{"index.html":{}}}],["please",{"_index":402,"title":{},"body":{"injectables/CreateUserProvider.html":{},"index.html":{}}}],["port",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["possible",{"_index":1027,"title":{},"body":{"index.html":{}}}],["post",{"_index":124,"title":{"entities/Post.html":{}},"body":{"controllers/AuthController.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@isenum(posttype",{"_index":260,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isstring()@isnotempty()@matches(/^[a",{"_index":334,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["post'})@isstring()@isnotempty()@minlength(4)@maxlength(30",{"_index":289,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isstring()@isoptional",{"_index":269,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isstring()@matches(/^[a",{"_index":271,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post('/create",{"_index":857,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('/sign",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{}}}],["post.author",{"_index":749,"title":{},"body":{"injectables/PostsService.html":{},"entities/User.html":{}}}],["post.dto",{"_index":675,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDto.html":{}}}],["post.dto.ts",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["post.dto.ts:101",{"_index":288,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:117",{"_index":258,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:12",{"_index":842,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["post.dto.ts:125",{"_index":244,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:31",{"_index":290,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:39",{"_index":261,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:50",{"_index":280,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:58",{"_index":283,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:66",{"_index":247,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:74",{"_index":270,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:83",{"_index":253,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:91",{"_index":267,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.entity",{"_index":697,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["post.enum",{"_index":301,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["post.enum.ts",{"_index":976,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["post.metaoptions",{"_index":497,"title":{},"body":{"entities/MetaOption.html":{}}}],["post.tags",{"_index":748,"title":{},"body":{"injectables/PostsService.html":{}}}],["postgres",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["postquery",{"_index":714,"title":{},"body":{"injectables/PostsService.html":{}}}],["postrepository",{"_index":707,"title":{},"body":{"injectables/PostsService.html":{}}}],["posts",{"_index":641,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{}}}],["posts'})@apiresponse({status",{"_index":659,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts'})@get('{/:userid",{"_index":660,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts.controller",{"_index":696,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.dto",{"_index":679,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["posts.dto.ts",{"_index":427,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"coverage.html":{}}}],["posts.dto.ts:12",{"_index":431,"title":{},"body":{"classes/GetPostsBaseDto.html":{}}}],["posts.dto.ts:8",{"_index":432,"title":{},"body":{"classes/GetPostsBaseDto.html":{}}}],["posts/posts.module",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":639,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":33,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":673,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":281,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":638,"title":{},"body":{"entities/Post.html":{}}}],["posttype",{"_index":234,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttype.post",{"_index":637,"title":{},"body":{"entities/Post.html":{}}}],["prefix",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["prepare",{"_index":736,"title":{},"body":{"injectables/PostsService.html":{}}}],["previous",{"_index":551,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["previouspage",{"_index":587,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["primarygeneratedcolumn",{"_index":490,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["private",{"_index":383,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["process",{"_index":396,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/ManyUsersProvider.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":1009,"title":{},"body":{"index.html":{}}}],["profileconfig",{"_index":905,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["profileconfiguration",{"_index":916,"title":{},"body":{"injectables/UsersService.html":{}}}],["progressive",{"_index":987,"title":{},"body":{"index.html":{}}}],["project",{"_index":999,"title":{},"body":{"index.html":{}}}],["promise",{"_index":183,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{}}}],["promise.all",{"_index":740,"title":{},"body":{"injectables/PostsService.html":{}}}],["properties",{"_index":199,"title":{"properties.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUserParamDto.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"entities/Post.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"properties.html":{}}}],["provide",{"_index":160,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["providers",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/bcrypt.provider",{"_index":153,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/create",{"_index":903,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/find",{"_index":908,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/hashing.provider",{"_index":151,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/many",{"_index":879,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["providers/meta",{"_index":518,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["providers/pagination.provider",{"_index":560,"title":{},"body":{"modules/PaginationModule.html":{}}}],["providers/posts.service",{"_index":674,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/sign",{"_index":154,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/tags.service",{"_index":813,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["providers/users.service",{"_index":878,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/ManyUsersProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["publish",{"_index":263,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["published",{"_index":980,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["publishon",{"_index":235,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["query",{"_index":672,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["query('limit",{"_index":884,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":886,"title":{},"body":{"controllers/UsersController.html":{}}}],["query.dto",{"_index":437,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"injectables/PaginationProvider.html":{}}}],["query.dto.ts",{"_index":594,"title":{},"body":{"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:12",{"_index":597,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["query.dto.ts:7",{"_index":596,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["queryrunner",{"_index":461,"title":{},"body":{"injectables/ManyUsersProvider.html":{},"injectables/UsersService.html":{}}}],["queryrunner.committransaction",{"_index":474,"title":{},"body":{"injectables/ManyUsersProvider.html":{}}}],["queryrunner.connect",{"_index":466,"title":{},"body":{"injectables/ManyUsersProvider.html":{}}}],["queryrunner.manager.create(user",{"_index":471,"title":{},"body":{"injectables/ManyUsersProvider.html":{}}}],["queryrunner.manager.save(user",{"_index":472,"title":{},"body":{"injectables/ManyUsersProvider.html":{}}}],["queryrunner.release().catch((err",{"_index":481,"title":{},"body":{"injectables/ManyUsersProvider.html":{}}}],["queryrunner.rollbacktransaction",{"_index":475,"title":{},"body":{"injectables/ManyUsersProvider.html":{}}}],["queryrunner.starttransaction",{"_index":467,"title":{},"body":{"injectables/ManyUsersProvider.html":{}}}],["questions",{"_index":1061,"title":{},"body":{"index.html":{}}}],["read",{"_index":1101,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/ManyUsersProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":1018,"title":{},"body":{"index.html":{}}}],["real",{"_index":1075,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":967,"title":{},"body":{"dependencies.html":{}}}],["relations",{"_index":728,"title":{},"body":{"injectables/PostsService.html":{}}}],["remaining",{"_index":750,"title":{},"body":{"injectables/PostsService.html":{}}}],["repository",{"_index":366,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["repository.count",{"_index":583,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["repository.find",{"_index":576,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["request",{"_index":397,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/ManyUsersProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["requesttimeoutexception",{"_index":376,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/ManyUsersProvider.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["requesttimeoutexception('unable",{"_index":395,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/ManyUsersProvider.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["required",{"_index":868,"title":{},"body":{"controllers/UsersController.html":{}}}],["requiring",{"_index":1043,"title":{},"body":{"index.html":{}}}],["reset",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":1055,"title":{},"body":{"index.html":{}}}],["results",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUserParamDto.html":{},"injectables/HashingProvider.html":{},"injectables/ManyUsersProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":97,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/ManyUsersProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returned",{"_index":870,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":95,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/HashingProvider.html":{},"injectables/ManyUsersProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":979,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["run",{"_index":1003,"title":{},"body":{"index.html":{}}}],["runs",{"_index":1025,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":970,"title":{},"body":{"dependencies.html":{}}}],["saltrounds",{"_index":190,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["save",{"_index":753,"title":{},"body":{"injectables/PostsService.html":{}}}],["scalable",{"_index":992,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":978,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["schema",{"_index":236,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["secret",{"_index":785,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["series",{"_index":982,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["server",{"_index":993,"title":{},"body":{"index.html":{}}}],["service",{"_index":914,"title":{},"body":{"injectables/UsersService.html":{}}}],["setup",{"_index":1000,"title":{},"body":{"index.html":{}}}],["side",{"_index":994,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":220,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{}}}],["sign",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signin(@body",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(signindto",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signindto",{"_index":107,"title":{"classes/SignInDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"coverage.html":{}}}],["signinprovider",{"_index":145,"title":{"injectables/SignInProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["simple",{"_index":1045,"title":{},"body":{"index.html":{}}}],["single",{"_index":729,"title":{},"body":{"injectables/PostsService.html":{}}}],["skip",{"_index":575,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["slug",{"_index":237,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUserParamDto.html":{},"injectables/HashingProvider.html":{},"injectables/ManyUsersProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["special",{"_index":353,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":443,"title":{},"body":{"classes/GetUserParamDto.html":{},"controllers/UsersController.html":{}}}],["sponsors",{"_index":1096,"title":{},"body":{"index.html":{}}}],["src/.../create",{"_index":975,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":984,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":89,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":94,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:15",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":902,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":146,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/dtos/sign",{"_index":756,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service",{"_index":926,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:13",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:6",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:9",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/bcrypt.provider",{"_index":907,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/providers/bcrypt.provider.ts",{"_index":175,"title":{},"body":{"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["src/auth/providers/bcrypt.provider.ts:12",{"_index":181,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/bcrypt.provider.ts:7",{"_index":185,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/hashing.provider",{"_index":381,"title":{},"body":{"injectables/CreateUserProvider.html":{},"modules/UsersModule.html":{}}}],["src/auth/providers/hashing.provider.ts",{"_index":447,"title":{},"body":{"injectables/HashingProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider.ts:5",{"_index":450,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/hashing.provider.ts:6",{"_index":449,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/sign",{"_index":763,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["src/common/dtos/pagination",{"_index":436,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["src/common/interfaces/paginated.interface",{"_index":571,"title":{},"body":{"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{}}}],["src/common/interfaces/paginated.interface.ts",{"_index":542,"title":{},"body":{"interfaces/Paginated.html":{},"coverage.html":{}}}],["src/common/pagination/pagination.module",{"_index":699,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/common/pagination/pagination.module.ts",{"_index":559,"title":{},"body":{"modules/PaginationModule.html":{}}}],["src/common/pagination/providers/pagination.provider",{"_index":720,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/common/pagination/providers/pagination.provider.ts",{"_index":561,"title":{},"body":{"injectables/PaginationProvider.html":{},"coverage.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:11",{"_index":566,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:9",{"_index":564,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/main.ts",{"_index":944,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":213,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["src/posts/dtos/create",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dtos/enums/create",{"_index":977,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/dtos/get",{"_index":426,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"coverage.html":{}}}],["src/posts/dtos/update",{"_index":840,"title":{},"body":{"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["src/posts/post.entity",{"_index":503,"title":{},"body":{"entities/MetaOption.html":{},"entities/User.html":{}}}],["src/posts/post.entity.ts",{"_index":603,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/posts/post.entity.ts:20",{"_index":614,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:26",{"_index":630,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:33",{"_index":618,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:40",{"_index":624,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:47",{"_index":625,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:53",{"_index":609,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:59",{"_index":621,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:66",{"_index":613,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:72",{"_index":620,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:78",{"_index":616,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:81",{"_index":607,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:85",{"_index":628,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/posts.controller.ts",{"_index":640,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:31",{"_index":661,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:48",{"_index":650,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:62",{"_index":669,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:81",{"_index":657,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":695,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":701,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:110",{"_index":711,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:18",{"_index":706,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:27",{"_index":713,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:32",{"_index":709,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:47",{"_index":716,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/dtos/create",{"_index":323,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service",{"_index":719,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/providers/tags.service.ts",{"_index":825,"title":{},"body":{"injectables/TagsService.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service.ts:14",{"_index":830,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:19",{"_index":831,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:23",{"_index":833,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:8",{"_index":828,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tag.entity",{"_index":304,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["src/tags/tag.entity.ts",{"_index":793,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/tag.entity.ts:13",{"_index":801,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:20",{"_index":803,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:26",{"_index":798,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:32",{"_index":802,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:39",{"_index":799,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:42",{"_index":795,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:45",{"_index":804,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:48",{"_index":797,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:6",{"_index":800,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":806,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts:16",{"_index":809,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:26",{"_index":812,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.module",{"_index":698,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/tags/tags.module.ts",{"_index":821,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/users/dtos/create",{"_index":196,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":441,"title":{},"body":{"classes/GetUserParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":600,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/create",{"_index":361,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["src/users/providers/find",{"_index":412,"title":{},"body":{"injectables/FindOneByEmailProvider.html":{},"coverage.html":{}}}],["src/users/providers/many",{"_index":452,"title":{},"body":{"injectables/ManyUsersProvider.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":718,"title":{},"body":{"injectables/PostsService.html":{},"injectables/SignInProvider.html":{}}}],["src/users/providers/users.service.ts",{"_index":912,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:109",{"_index":925,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:25",{"_index":918,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:49",{"_index":920,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:53",{"_index":919,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:64",{"_index":922,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:87",{"_index":924,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.entity",{"_index":636,"title":{},"body":{"entities/Post.html":{}}}],["src/users/user.entity.ts",{"_index":843,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:14",{"_index":846,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:21",{"_index":848,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:29",{"_index":845,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:36",{"_index":849,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:39",{"_index":851,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:7",{"_index":847,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":853,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:50",{"_index":872,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:63",{"_index":859,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:68",{"_index":874,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:73",{"_index":862,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:78",{"_index":858,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":149,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/users/users.module.ts",{"_index":900,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":1005,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1008,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1010,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":429,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{}}}],["started",{"_index":986,"title":{"index.html":{}},"body":{}}],["starter",{"_index":998,"title":{},"body":{"index.html":{}}}],["statements",{"_index":938,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["stay",{"_index":1082,"title":{},"body":{"index.html":{}}}],["steps",{"_index":1023,"title":{},"body":{"index.html":{}}}],["story",{"_index":981,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":1041,"title":{},"body":{"index.html":{}}}],["string",{"_index":96,"title":{},"body":{"injectables/AppService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"entities/Post.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["string(err",{"_index":479,"title":{},"body":{"injectables/ManyUsersProvider.html":{}}}],["sub",{"_index":782,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["successful",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{}}}],["successful'})@apiresponse({status",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{}}}],["successfully",{"_index":513,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@apiquery({name",{"_index":867,"title":{},"body":{"controllers/UsersController.html":{}}}],["summary",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":1062,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1112,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["t",{"_index":545,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["table",{"_index":954,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":953,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":285,"title":{"entities/Tag.html":{}},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["tag'})@apiresponse({status",{"_index":808,"title":{},"body":{"controllers/TagsController.html":{}}}],["tag.dto",{"_index":814,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tag.dto.ts",{"_index":324,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:10",{"_index":331,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:22",{"_index":335,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:27",{"_index":327,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:32",{"_index":333,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:38",{"_index":329,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.entity",{"_index":823,"title":{},"body":{"modules/TagsModule.html":{},"injectables/TagsService.html":{}}}],["tagids",{"_index":834,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagrepository",{"_index":829,"title":{},"body":{"injectables/TagsService.html":{}}}],["tags",{"_index":238,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{}}}],["tags'})@apiresponse({status",{"_index":810,"title":{},"body":{"controllers/TagsController.html":{}}}],["tags'})@get",{"_index":811,"title":{},"body":{"controllers/TagsController.html":{}}}],["tags.controller",{"_index":822,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags/tags.module",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":805,"title":{"controllers/TagsController.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodule",{"_index":34,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsservice",{"_index":705,"title":{"injectables/TagsService.html":{}},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["take",{"_index":577,"title":{},"body":{"injectables/PaginationProvider.html":{},"index.html":{}}}],["test",{"_index":1013,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":1016,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1015,"title":{},"body":{"index.html":{}}}],["test@test.com",{"_index":762,"title":{},"body":{"classes/SignInDto.html":{}}}],["test@test.com'})@isemail()@isnotempty",{"_index":758,"title":{},"body":{"classes/SignInDto.html":{}}}],["tests",{"_index":1011,"title":{},"body":{"index.html":{}}}],["text",{"_index":608,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["thanks",{"_index":1095,"title":{},"body":{"index.html":{}}}],["this.authservice.isauthenticated",{"_index":931,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.authservice.signin(signindto",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.createuserprovider.createuser(createuserdto",{"_index":929,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.datasource.createqueryrunner",{"_index":465,"title":{},"body":{"injectables/ManyUsersProvider.html":{}}}],["this.findonebyemailprovider.findonebyemail(email",{"_index":934,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.hashingprovider.compare",{"_index":776,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.hashingprovider.hash(createuserdto.password",{"_index":407,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.jwtconfiguration.secret",{"_index":786,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.jwtconfiguration.signoptions.audience",{"_index":790,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.jwtconfiguration.signoptions.expiresin",{"_index":788,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.jwtconfiguration.signoptions.issuer",{"_index":792,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.jwtservice.signasync",{"_index":781,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.manyusersprovider.createmanyusers(createmanyusersdto",{"_index":930,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.metaoptionsrepository.create(createmetaoptionsdto",{"_index":537,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsrepository.save(metaoption",{"_index":538,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsservice.create(createmetaoptiondto",{"_index":522,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.paginationprovider.paginatequery(postquery",{"_index":722,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository",{"_index":723,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.create",{"_index":726,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.delete(id",{"_index":755,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.save(post",{"_index":727,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.save(post).catch((error",{"_index":754,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsservice.create(createpostdto",{"_index":685,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.delete(id",{"_index":691,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findall(getpostsdto",{"_index":683,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.update(updatepostdto",{"_index":687,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.request.get('host",{"_index":580,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.request.protocol",{"_index":579,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.signinprovider.signin(signindto",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.tagrepository.create(createtagdto",{"_index":836,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagrepository.find",{"_index":838,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagrepository.save(tag",{"_index":837,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsservice",{"_index":742,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.tagsservice.create(createtagdto",{"_index":816,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.findall",{"_index":817,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.findmultipletags(createpostdto.tags",{"_index":725,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.userrepository.create",{"_index":408,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.userrepository.find",{"_index":932,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":390,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.userrepository.findoneby",{"_index":421,"title":{},"body":{"injectables/FindOneByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["this.userrepository.save(user",{"_index":409,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.usersservice.createmanyusers(createmanyusersdto",{"_index":896,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.createuser(createuserdto",{"_index":892,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall(getuserparamdto",{"_index":890,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(createpostdto.authorid",{"_index":724,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.usersservice.findone(getuserparamdto.id",{"_index":889,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(updatepostdto.authorid).catch((error",{"_index":746,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.usersservice.findonebyemail(email",{"_index":774,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["throw",{"_index":394,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/ManyUsersProvider.html":{},"injectables/PostsService.html":{},"injectables/SignInProvider.html":{},"injectables/UsersService.html":{}}}],["time",{"_index":1076,"title":{},"body":{"index.html":{}}}],["timestamp",{"_index":619,"title":{},"body":{"entities/Post.html":{}}}],["title",{"_index":239,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["totalitems",{"_index":548,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["totalpages",{"_index":550,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["touch",{"_index":1103,"title":{},"body":{"index.html":{}}}],["transaction",{"_index":478,"title":{},"body":{"injectables/ManyUsersProvider.html":{}}}],["transformer",{"_index":210,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/GetUserParamDto.html":{},"dependencies.html":{}}}],["true",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["true}'})@isnotempty()@isjson",{"_index":222,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{}}}],["true})@jointable",{"_index":627,"title":{},"body":{"entities/Post.html":{}}}],["true})@type(undefined",{"_index":203,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["try",{"_index":388,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/ManyUsersProvider.html":{},"injectables/UsersService.html":{}}}],["twitter",{"_index":1108,"title":{},"body":{"index.html":{}}}],["type",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUserParamDto.html":{},"injectables/HashingProvider.html":{},"injectables/ManyUsersProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["typeorm",{"_index":379,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/ManyUsersProvider.html":{},"entities/MetaOption.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([metaoption",{"_index":528,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":700,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([tag",{"_index":824,"title":{},"body":{"modules/TagsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":910,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["typescript",{"_index":997,"title":{},"body":{"index.html":{}}}],["unable",{"_index":744,"title":{},"body":{"injectables/PostsService.html":{}}}],["unauthorized",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorized'})@post('/sign",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorizedexception",{"_index":420,"title":{},"body":{"injectables/FindOneByEmailProvider.html":{},"injectables/SignInProvider.html":{}}}],["unauthorizedexception('invalid",{"_index":778,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["unauthorizedexception('user",{"_index":422,"title":{},"body":{"injectables/FindOneByEmailProvider.html":{}}}],["undefined",{"_index":617,"title":{},"body":{"entities/Post.html":{}}}],["undefined})@isoptional()@isarray()@isint({each",{"_index":287,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isoptional()@validatenested({each",{"_index":257,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":623,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["unit",{"_index":1012,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/ManyUsersProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":1122,"title":{},"body":{"properties.html":{}}}],["update",{"_index":665,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDto.html":{}}}],["update(updatepostdto",{"_index":715,"title":{},"body":{"injectables/PostsService.html":{}}}],["updated",{"_index":667,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatedat",{"_index":487,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatedatecolumn",{"_index":501,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatepost",{"_index":645,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":686,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(updatepostdto",{"_index":663,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepostdto",{"_index":664,"title":{"classes/UpdatePostDto.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["updatepostdto.authorid",{"_index":745,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepostdto.id",{"_index":731,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepostdto.tags",{"_index":741,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepostdto})@patch",{"_index":668,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":666,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["updateuser",{"_index":856,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuser(@body",{"_index":893,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuser(patchuserdto",{"_index":873,"title":{},"body":{"controllers/UsersController.html":{}}}],["uppercase",{"_index":351,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["url",{"_index":250,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["url(this.request.url",{"_index":582,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["use",{"_index":403,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["useclass",{"_index":161,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["usefactory",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":372,"title":{"entities/User.html":{}},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"classes/GetUserParamDto.html":{},"injectables/ManyUsersProvider.html":{},"entities/Post.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user.dto",{"_index":209,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"injectables/CreateUserProvider.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":337,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:16",{"_index":344,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":346,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:26",{"_index":342,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:35",{"_index":355,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":784,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["user.entity",{"_index":378,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/ManyUsersProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.id",{"_index":783,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["user.password",{"_index":777,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["user.posts",{"_index":605,"title":{},"body":{"entities/Post.html":{}}}],["user.provider",{"_index":904,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.provider.ts",{"_index":362,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["user.provider.ts:22",{"_index":369,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.provider.ts:9",{"_index":367,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["userid",{"_index":662,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["username",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["userrepository",{"_index":365,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["users",{"_index":200,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users'})@apiresponse({status",{"_index":865,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":901,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.dto",{"_index":462,"title":{},"body":{"injectables/ManyUsersProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.dto.ts",{"_index":198,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"coverage.html":{}}}],["users.dto.ts:9",{"_index":204,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["users.provider",{"_index":880,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["users.provider.ts",{"_index":453,"title":{},"body":{"injectables/ManyUsersProvider.html":{},"coverage.html":{}}}],["users.provider.ts:12",{"_index":457,"title":{},"body":{"injectables/ManyUsersProvider.html":{}}}],["users.provider.ts:15",{"_index":459,"title":{},"body":{"injectables/ManyUsersProvider.html":{}}}],["users/users.module",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{}}}],["userscontroller",{"_index":852,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":35,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":704,"title":{"injectables/UsersService.html":{}},"body":{"injectables/PostsService.html":{},"injectables/SignInProvider.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":1077,"title":{},"body":{"index.html":{}}}],["validatenested",{"_index":206,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["validationschema",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":207,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUserParamDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SignInDto.html":{},"classes/UpdatePostDto.html":{},"dependencies.html":{}}}],["value",{"_index":182,"title":{},"body":{"injectables/BcryptProvider.html":{},"classes/CreateMetaOptionsDto.html":{},"injectables/HashingProvider.html":{},"classes/PaginationQueryDto.html":{},"miscellaneous/enumerations.html":{}}}],["varchar",{"_index":610,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["version",{"_index":1120,"title":{},"body":{"properties.html":{}}}],["video",{"_index":1069,"title":{},"body":{"index.html":{}}}],["visit",{"_index":1059,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1072,"title":{},"body":{"index.html":{}}}],["watch",{"_index":1006,"title":{},"body":{"index.html":{}}}],["website",{"_index":1106,"title":{},"body":{"index.html":{}}}],["working",{"_index":1058,"title":{},"body":{"index.html":{}}}],["world",{"_index":99,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":1085,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":1099,"title":{},"body":{"index.html":{}}}],["you're",{"_index":1017,"title":{},"body":{"index.html":{}}}],["z",{"_index":349,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z0",{"_index":272,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["z])(?=.*[a",{"_index":348,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PaginationModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TagsModule } from './tags/tags.module';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { PaginationModule } from './common/pagination/pagination.module';\nimport appConfig from './config/app.config';\nimport databaseConfig from './config/database.config';\nimport envValidationSchema from './config/env.validation';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: ['.env.development'],\n      load: [appConfig, databaseConfig],\n      validationSchema: envValidationSchema,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('database.host'),\n        port: configService.get('database.port'),\n        username: configService.get('database.username'),\n        password: configService.get('database.password'),\n        database: configService.get('database.database'),\n        autoLoadEntities: configService.get('database.autoLoadEntities'),\n        synchronize: configService.get('database.synchronize'),\n      }),\n    }),\n    UsersModule,\n    PostsModule,\n    AuthModule,\n    TagsModule,\n    MetaOptionsModule,\n    PaginationModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Sign in'})@ApiResponse({status: 200, description: 'Sign in successful'})@ApiResponse({status: 401, description: 'Unauthorized'})@Post('/sign-in')@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, HttpStatus, Post, HttpCode } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\nimport { SignInDto } from './dtos/sign-in.dto';\nimport { ApiOperation, ApiResponse } from '@nestjs/swagger';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @ApiOperation({ summary: 'Sign in' })\n  @ApiResponse({ status: 200, description: 'Sign in successful' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @Post('/sign-in')\n  @HttpCode(HttpStatus.OK)\n  public signIn(@Body() signInDto: SignInDto) {\n    return this.authService.signIn(signInDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            SignInProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { HashingProvider } from './providers/hashing.provider';\nimport { BcryptProvider } from './providers/bcrypt.provider';\nimport { SignInProvider } from './providers/sign-in.provider';\nimport { ConfigModule } from '@nestjs/config';\nimport jwtConfig from './config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\n\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService, { provide: HashingProvider, useClass: BcryptProvider }, SignInProvider],\n  imports: [forwardRef(() => UsersModule), ConfigModule.forFeature(jwtConfig), JwtModule.registerAsync(jwtConfig.asProvider())],\n  exports: [AuthService],\n})\n\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuthenticated\n                            \n                            \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(signInProvider: SignInProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        signInProvider\n                                                  \n                                                        \n                                                                        SignInProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuthenticated\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuthenticated()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { SignInDto } from '../dtos/sign-in.dto';\nimport { SignInProvider } from './sign-in.provider';\n\n@Injectable()\nexport class AuthService {\n  constructor(private readonly signInProvider: SignInProvider) {}\n\n  public async signIn(signInDto: SignInDto) {\n    return this.signInProvider.signIn(signInDto);\n  }\n\n  public isAuthenticated() {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BcryptProvider.html":{"url":"injectables/BcryptProvider.html","title":"injectable - BcryptProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/bcrypt.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                compare\n                            \n                            \n                                    Async\n                                hash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        compare\n                        \n                    \n                \n            \n            \n                \n                        \n                    compare(value: string | Buffer, hashedValue: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                hashedValue\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        hash\n                        \n                    \n                \n            \n            \n                \n                        \n                    hash(value: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { HashingProvider } from './hashing.provider';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class BcryptProvider implements HashingProvider {\n  async hash(value: string | Buffer): Promise {\n    const saltRounds = 10;\n    return bcrypt.hash(value, saltRounds);\n  }\n\n  async compare(value: string | Buffer, hashedValue: string): Promise {\n    return bcrypt.compare(value, hashedValue);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateManyUsersDto.html":{"url":"classes/CreateManyUsersDto.html","title":"class - CreateManyUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateManyUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-many-users.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateUserDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-many-users.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, ValidateNested } from \"class-validator\";\nimport { CreateUserDto } from \"./create-user.dto\";\nimport { Type } from \"class-transformer\";\n\nexport class CreateManyUsersDto {\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreateUserDto)\n  users: CreateUserDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMetaOptionsDto.html":{"url":"classes/CreateMetaOptionsDto.html","title":"class - CreateMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-post-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The value of the meta option', example: '{\"sidebarEnabled\": true, \"footerActive\": true}'})@IsNotEmpty()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-post-meta-options.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsJSON, IsNotEmpty } from 'class-validator';\n\nexport class CreateMetaOptionsDto {\n  @ApiProperty({\n    description: 'The value of the meta option',\n    example: '{\"sidebarEnabled\": true, \"footerActive\": true}',\n  })\n  @IsNotEmpty()\n  @IsJSON()\n  metaValue: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                authorId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                featureImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The author id of the post', example: 1})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:125\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The content of the post', example: '{\"hey\":\"world\"}'})@IsJSON()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        featureImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The feature image URL of the post', example: 'https://example.com/feature-image.jpg'})@IsUrl()@MaxLength(1024)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateMetaOptionsDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'object', description: 'The meta options of the post', properties: undefined})@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:117\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostType, description: 'The type of the post', example: 'post'})@IsEnum(PostType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The publish date of the post', example: '2024-03-20T10:00:00Z'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The schema of the post', example: 'This is the schema of my first post'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The slug of the post', example: 'my-first-post'})@IsString()@Matches(/^[a-z0-9-]+$/, {message: 'Slug must contain only lowercase letters, numbers, and hyphens'})@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostStatus, description: 'The status of the post', example: 'draft'})@IsEnum(PostStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'array', description: 'The array of tag ids of the post', example: undefined})@IsOptional()@IsArray()@IsInt({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:101\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The title of the post', example: 'My First Post'})@IsString()@IsNotEmpty()@MinLength(4)@MaxLength(30)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsEnum,\n  IsOptional,\n  IsUrl,\n  IsArray,\n  ValidateNested,\n  MinLength,\n  MaxLength,\n  IsNotEmpty,\n  Matches,\n  IsJSON,\n  IsISO8601,\n  IsInt,\n} from 'class-validator';\nimport { PostStatus, PostType } from './enums/create-post.enum';\nimport { CreateMetaOptionsDto } from '../../meta-options/dtos/create-post-meta-options.dto';\nimport { Type } from 'class-transformer';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { Tag } from 'src/tags/tag.entity';\n\nexport class CreatePostDto {\n  @ApiProperty({\n    description: 'The title of the post',\n    example: 'My First Post',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(4)\n  @MaxLength(30)\n  title: string;\n\n  @ApiProperty({\n    enum: PostType,\n    description: 'The type of the post',\n    example: 'post',\n  })\n  @IsEnum(PostType)\n  postType: PostType;\n\n  @ApiProperty({\n    description: 'The slug of the post',\n    example: 'my-first-post',\n  })\n  @IsString()\n  @Matches(/^[a-z0-9-]+$/, {\n    message: 'Slug must contain only lowercase letters, numbers, and hyphens',\n  })\n  @MaxLength(256)\n  slug: string;\n\n  @ApiProperty({\n    enum: PostStatus,\n    description: 'The status of the post',\n    example: 'draft',\n  })\n  @IsEnum(PostStatus)\n  status: PostStatus;\n\n  @ApiPropertyOptional({\n    description: 'The content of the post',\n    example: '{\\\"hey\\\":\\\"world\\\"}',\n  })\n  @IsJSON()\n  @IsOptional()\n  content?: string;\n\n  @ApiPropertyOptional({\n    description: 'The schema of the post',\n    example: 'This is the schema of my first post',\n  })\n  @IsString()\n  @IsOptional()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'The feature image URL of the post',\n    example: 'https://example.com/feature-image.jpg',\n  })\n  @IsUrl()\n  @MaxLength(1024)\n  @IsOptional()\n  featureImageUrl: string;\n\n  @ApiPropertyOptional({\n    description: 'The publish date of the post',\n    example: '2024-03-20T10:00:00Z',\n  })\n  @IsISO8601()\n  @IsOptional()\n  publishOn?: Date;\n\n  @ApiPropertyOptional({\n    type: 'array',\n    description: 'The array of tag ids of the post',\n    example: [1, 2, 3],\n  })\n  @IsOptional()\n  @IsArray()\n  @IsInt({ each: true })\n  tags: number[];\n\n  @ApiPropertyOptional({\n    type: 'object',\n    description: 'The meta options of the post',\n    properties: {\n      metaValue: {\n        type: 'string',\n        description: 'The metaValue is a JSON object',\n        example: '{ \"sidebarEnabled\": true, \"footerActive\": true }',\n      },\n    },\n  })\n  @IsOptional()\n  @ValidateNested({ each: true })\n  @Type(() => CreateMetaOptionsDto)\n  metaOptions?: CreateMetaOptionsDto;\n\n  @ApiProperty({\n    description: 'The author id of the post',\n    example: 1,\n  })\n  @IsInt()\n  @IsNotEmpty()\n  authorId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsUrl()@IsOptional()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@MinLength(3)@MaxLength(256)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsJSON()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The slug of the post', example: 'my-first-post'})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9-]+$/, {message: 'Slug must contain only lowercase letters, numbers, and hyphens'})@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsOptional, IsString, IsUrl, IsNotEmpty, MaxLength, MinLength, Matches, IsJSON } from \"class-validator\";\n\nexport class CreateTagDto {\n  @ApiProperty()\n  @IsString()\n  @MinLength(3)\n  @MaxLength(256)\n  @IsNotEmpty()\n  name: string;\n\n  @ApiProperty({\n    description: 'The slug of the post',\n    example: 'my-first-post',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9-]+$/, {\n    message: 'Slug must contain only lowercase letters, numbers, and hyphens',\n  })\n  @MaxLength(256)\n  slug: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  description?: string;\n\n  @ApiPropertyOptional()\n  @IsJSON()\n  @IsOptional()\n  schema?: string;\n\n  @ApiPropertyOptional()\n  @IsUrl()\n  @IsOptional()\n  @MaxLength(1024)\n  featuredImageUrl?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(8)@IsNotEmpty()@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {message: 'password must contain at least one uppercase letter, one lowercase letter and one number or special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsOptional,\n  IsEmail,\n  IsNotEmpty,\n  MinLength,\n  MaxLength,\n  Matches,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsEmail()\n  @MaxLength(96)\n  email: string;\n\n  @IsString()\n  @MinLength(8)\n  @IsNotEmpty()\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {\n    message:\n      'password must contain at least one uppercase letter, one lowercase letter and one number or special character',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateUserProvider.html":{"url":"injectables/CreateUserProvider.html","title":"injectable - CreateUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/create-user.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(hashingProvider: HashingProvider, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/create-user.provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/create-user.provider.ts:22\n                        \n                    \n\n\n            \n                \n                        Creates a new user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe DTO for the create user\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The created user\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, forwardRef, Inject, Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { User } from '../user.entity';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { HashingProvider } from 'src/auth/providers/hashing.provider';\n\n@Injectable()\nexport class CreateUserProvider {\n    constructor(\n        @Inject(forwardRef(() => HashingProvider))\n        private readonly hashingProvider: HashingProvider,\n\n        @InjectRepository(User)\n        private readonly userRepository: Repository,\n    ) {}\n    /**\n   * Creates a new user\n   * @param createUserDto - The DTO for the create user\n   * @returns The created user\n   */\n    public async createUser(createUserDto: CreateUserDto) {\n      let existingUser: User | null;\n  \n      try {\n        existingUser = await this.userRepository.findOne({\n          where: {\n            email: createUserDto.email,\n          },\n        });\n      } catch (error) {\n        throw new RequestTimeoutException('Unable to process the request', {\n          cause: error,\n          description: 'Error connecting to the database',\n        });\n      }\n  \n      // If the user already exists, throw an error\n      if (existingUser) {\n        throw new BadRequestException(\n          'The user already exists. Please use a different email address.',\n          {\n            description: 'The user already exists',\n            cause: existingUser,\n          },\n        );\n      }\n  \n      // Create a new user\n      const hashedPassword = await this.hashingProvider.hash(createUserDto.password);\n      const user = this.userRepository.create({\n        ...createUserDto,\n        password: hashedPassword,\n      });\n  \n      try {\n        return await this.userRepository.save(user);\n      } catch (error) {\n        throw new RequestTimeoutException('Unable to process the request', {\n          cause: error,\n          description: 'Error creating the user',\n        });\n      }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindOneByEmailProvider.html":{"url":"injectables/FindOneByEmailProvider.html","title":"injectable - FindOneByEmailProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindOneByEmailProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/find-one-by-email.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findOneByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/find-one-by-email.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/find-one-by-email.provider.ts:18\n                        \n                    \n\n\n            \n                \n                        Finds a user by email\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe email of the user\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The user\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, RequestTimeoutException, UnauthorizedException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '../user.entity';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class FindOneByEmailProvider {\n  constructor(\n    @InjectRepository(User)\n    private readonly userRepository: Repository,\n  ) {}\n\n  /**\n   * Finds a user by email\n   * @param email - The email of the user\n   * @returns The user\n   */\n  public async findOneByEmail(email: string) {\n    try {\n      const user = await this.userRepository.findOneBy({ email });\n\n      if (!user) {\n        throw new UnauthorizedException('User does not exist');\n      }\n\n      return user;\n    } catch (error) {\n      throw new RequestTimeoutException('Unable to process the request', {\n        cause: error,\n        description: 'Error finding the user',\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostsBaseDto.html":{"url":"classes/GetPostsBaseDto.html","title":"class - GetPostsBaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostsBaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/get-posts.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                endDate\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                startDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/get-posts.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/get-posts.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsOptional } from 'class-validator';\nimport { IntersectionType } from '@nestjs/swagger';\nimport { PaginationQueryDto } from 'src/common/dtos/pagination-query.dto';\n\nexport class GetPostsBaseDto {\n  @IsDate()\n  @IsOptional()\n  startDate?: Date;\n\n  @IsDate()\n  @IsOptional()\n  endDate?: Date;\n}\n\nexport class GetPostsDto extends IntersectionType(\n  GetPostsBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostsDto.html":{"url":"classes/GetPostsDto.html","title":"class - GetPostsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/get-posts.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            IntersectionType(\n  GetPostsBaseDto,\n  PaginationQueryDto,\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsOptional } from 'class-validator';\nimport { IntersectionType } from '@nestjs/swagger';\nimport { PaginationQueryDto } from 'src/common/dtos/pagination-query.dto';\n\nexport class GetPostsBaseDto {\n  @IsDate()\n  @IsOptional()\n  startDate?: Date;\n\n  @IsDate()\n  @IsOptional()\n  endDate?: Date;\n}\n\nexport class GetPostsDto extends IntersectionType(\n  GetPostsBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUserParamDto.html":{"url":"classes/GetUserParamDto.html","title":"class - GetUserParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUserParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-user-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific id', example: '1234'})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-user-param.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class GetUserParamDto {\n  @ApiPropertyOptional({\n    description: 'Get user with a specific id',\n    example: '1234',\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashingProvider.html":{"url":"injectables/HashingProvider.html","title":"injectable - HashingProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashingProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/hashing.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                compare\n                            \n                            \n                                    Abstract\n                                hash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        compare\n                        \n                    \n                \n            \n            \n                \n                        \n                    compare(value: string | Buffer, hashedValue: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                hashedValue\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        hash\n                        \n                    \n                \n            \n            \n                \n                        \n                    hash(value: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport abstract class HashingProvider {\n  abstract hash(value: string | Buffer): Promise;\n  abstract compare(value: string | Buffer, hashedValue: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ManyUsersProvider.html":{"url":"injectables/ManyUsersProvider.html","title":"injectable - ManyUsersProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ManyUsersProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/many-users.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createManyUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/many-users.provider.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createManyUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createManyUsers(createManyUsersDto: CreateManyUsersDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/many-users.provider.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ConflictException,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { User } from '../user.entity';\nimport { DataSource, QueryRunner } from 'typeorm';\nimport { CreateManyUsersDto } from '../dtos/create-many-users.dto';\n\n@Injectable()\nexport default class ManyUsersProvider {\n  constructor(private readonly dataSource: DataSource) {}\n\n  public async createManyUsers(createManyUsersDto: CreateManyUsersDto) {\n    const newUsers: User[] = [];\n    let queryRunner: QueryRunner;\n    queryRunner = this.dataSource.createQueryRunner();\n\n    try {\n      await queryRunner.connect();\n      await queryRunner.startTransaction();\n    } catch (err) {\n      throw new RequestTimeoutException('Unable to process the request');\n    }\n\n    try {\n      for (const user of createManyUsersDto.users) {\n        const newUser = queryRunner.manager.create(User, user);\n        await queryRunner.manager.save(User, newUser);\n\n        newUsers.push(newUser);\n      }\n\n      await queryRunner.commitTransaction();\n      return newUsers;\n    } catch (err) {\n      await queryRunner.rollbackTransaction();\n      throw new ConflictException('Could not complete the transaction', {\n        description: String(err),\n        cause: err,\n      });\n    } finally {\n      await queryRunner.release().catch((err) => {\n        throw new RequestTimeoutException('Unable to process the request', {\n          cause: err,\n        });\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-option.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                    \n                                post\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, post => post.metaOptions, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:27\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class MetaOption {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'json',\n    nullable: false,\n  })\n  metaValue: string;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @OneToOne(() => Post, (post) => post.metaOptions, { onDelete: 'CASCADE' })\n  @JoinColumn()\n  post: Post;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createMetaOptionDto: CreateMetaOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a new meta option'})@ApiResponse({status: 201, description: 'The meta option has been successfully created.'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createMetaOptionDto\n                                            \n                                                            CreateMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { MetaOptionsService } from './providers/meta-options.service';\nimport { CreateMetaOptionsDto } from './dtos/create-post-meta-options.dto';\nimport { ApiOperation, ApiResponse } from '@nestjs/swagger';\n\n@Controller('meta-options')\nexport class MetaOptionsController {\n  constructor(private readonly metaOptionsService: MetaOptionsService) {}\n\n  @ApiOperation({ summary: 'Create a new meta option' })\n  @ApiResponse({ status: 201, description: 'The meta option has been successfully created.' })\n  @Post()\n  create(@Body() createMetaOptionDto: CreateMetaOptionsDto) {\n    return this.metaOptionsService.create(createMetaOptionDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MetaOptionsController } from './meta-options.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOption } from './meta-option.entity';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n@Module({\n  controllers: [MetaOptionsController],\n  providers: [MetaOptionsService],\n  imports: [TypeOrmModule.forFeature([MetaOption])],\n})\n\nexport class MetaOptionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionsService.html":{"url":"injectables/MetaOptionsService.html","title":"injectable - MetaOptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/providers/meta-options.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaOptionsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/providers/meta-options.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createMetaOptionsDto: CreateMetaOptionsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/providers/meta-options.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createMetaOptionsDto\n                                            \n                                                            CreateMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { MetaOption } from \"../meta-option.entity\";\nimport { CreateMetaOptionsDto } from \"../dtos/create-post-meta-options.dto\";\n\n@Injectable()\nexport class MetaOptionsService {\n  constructor(\n    @InjectRepository(MetaOption)\n    private metaOptionsRepository: Repository,\n  ) {}\n\n  public async create(createMetaOptionsDto: CreateMetaOptionsDto) {\n    const metaOption = this.metaOptionsRepository.create(createMetaOptionsDto);\n    return this.metaOptionsRepository.save(metaOption);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Paginated.html":{"url":"interfaces/Paginated.html","title":"interface - Paginated","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Paginated\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/paginated.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            links\n                                        \n                                \n                                \n                                        \n                                            meta\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        links\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        links:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Paginated {\n  data: T[];\n  meta: {\n    itemsPerPage: number;\n    totalItems: number;\n    currentPage: number;\n    totalPages: number;\n  },\n  links: {\n    first: string;\n    previous: string;\n    current: string;\n    next: string;\n    last: string;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaginationModule.html":{"url":"modules/PaginationModule.html","title":"module - PaginationModule","body":"\n                   \n\n\n\n\n    Modules\n    PaginationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_providers\n\n\n\ncluster_PaginationModule_exports\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\n\n\nPaginationModule\n\nPaginationModule\n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/pagination/pagination.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PaginationProvider } from './providers/pagination.provider';\n\n@Module({\n  providers: [PaginationProvider],\n  exports: [PaginationProvider],\n})\nexport class PaginationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginationProvider.html":{"url":"injectables/PaginationProvider.html","title":"injectable - PaginationProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaginationProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/providers/pagination.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                paginateQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/common/pagination/providers/pagination.provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        paginateQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginateQuery(paginationQuery: PaginationQueryDto, repository: Repository)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/pagination/providers/pagination.provider.ts:11\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                repository\n                                            \n                                                        Repository\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { PaginationQueryDto } from 'src/common/dtos/pagination-query.dto';\nimport { ObjectLiteral, Repository } from 'typeorm';\nimport { Request } from 'express';\nimport { REQUEST } from '@nestjs/core';\nimport { Paginated } from 'src/common/interfaces/paginated.interface';\n\n@Injectable()\nexport class PaginationProvider {\n  constructor(@Inject(REQUEST) private readonly request: Request) {}\n  public async paginateQuery(\n    paginationQuery: PaginationQueryDto,\n    repository: Repository,\n  ): Promise> {\n    const { page, limit } = paginationQuery;\n    const skip = (page - 1) * limit;\n    const results = await repository.find({\n      take: limit,\n      skip,\n    });\n\n    const baseUrl = this.request.protocol + '://' + this.request.get('host');\n    const newUrl = new URL(this.request.url, baseUrl);\n\n    const totalItems = await repository.count();\n    const totalPages = Math.ceil(totalItems / limit);\n    const nextPage = paginationQuery.page === totalPages ? paginationQuery.page : paginationQuery.page + 1;\n    const previousPage = paginationQuery.page === 1 ? paginationQuery.page : paginationQuery.page - 1;\n\n    const finalResponse: Paginated = {\n      data: results,\n      meta: {\n        itemsPerPage: limit,\n        totalItems,\n        totalPages,\n        currentPage: paginationQuery.page,\n      },\n      links: {\n        first: `${baseUrl}${newUrl.pathname}?page=1&limit=${limit}`,\n        previous: `${baseUrl}${newUrl.pathname}?page=${previousPage}&limit=${limit}`,\n        current: `${baseUrl}${newUrl.pathname}?page=${paginationQuery.page}&limit=${limit}`,\n        next: `${baseUrl}${newUrl.pathname}?page=${nextPage}&limit=${limit}`,\n        last: `${baseUrl}${newUrl.pathname}?page=${totalPages}&limit=${limit}`,\n      },\n    };\n\n    return finalResponse;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationQueryDto.html":{"url":"classes/PaginationQueryDto.html","title":"class - PaginationQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/pagination-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/pagination-query.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/pagination-query.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional, IsPositive } from \"class-validator\";\n\nexport class PaginationQueryDto {\n  @IsInt()\n  @IsOptional()\n  @IsPositive()\n  limit: number = 10;\n\n  @IsInt()\n  @IsOptional()\n  @IsPositive()\n  page: number = 1;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                content\n                            \n                            \n                                    \n                                    Optional\n                                featureImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featureImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOption\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, metaOption => metaOption.post, {cascade: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: PostType, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: PostStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, {eager: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 30})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:26\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinColumn,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToMany,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { PostStatus, PostType } from './dtos/enums/create-post.enum';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { User } from 'src/users/user.entity';\nimport { Tag } from 'src/tags/tag.entity';\n\n@Entity()\nexport class Post {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 30,\n  })\n  title: string;\n\n  @Column({\n    type: 'enum',\n    enum: PostType,\n    default: PostType.Post,\n  })\n  postType: PostType;\n\n  @Column({\n    type: 'varchar',\n    length: 256,\n    unique: true,\n  })\n  slug: string;\n\n  @Column({\n    type: 'enum',\n    enum: PostStatus,\n    default: PostStatus.Draft,\n  })\n  status: PostStatus;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  content: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  schema: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: true,\n  })\n  featureImageUrl?: string;\n\n  @Column({\n    type: 'timestamp',\n    nullable: true,\n  })\n  publishOn?: Date;\n\n  @OneToOne(() => MetaOption, (metaOption) => metaOption.post, {\n    cascade: true,\n    eager: true,\n  })\n  metaOptions: MetaOption;\n\n  @ManyToOne(() => User, (user) => user.posts, { eager: true })\n  author: User;\n\n  @ManyToMany(() => Tag, { eager: true })\n  @JoinTable()\n  tags?: Tag[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                deletePost\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a new post', description: 'Creates a new post with the given data'})@ApiResponse({status: 201, description: 'The post has been successfully created.', type: CreatePostDto})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete a post', description: 'Deletes a post with the given id'})@ApiResponse({status: 200, description: 'The post has been successfully deleted.'})@ApiParam({name: 'id', description: 'The id of the post to delete', example: 1, type: Number})@Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: number, getPostsDto: GetPostsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get all posts', description: 'Returns all posts'})@ApiResponse({status: 200, description: 'Returns all posts'})@Get('{/:userId}')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                getPostsDto\n                                            \n                                                            GetPostsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(updatePostDto: UpdatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update a post', description: 'Updates a post with the given data'})@ApiResponse({status: 200, description: 'The post has been successfully updated.', type: UpdatePostDto})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updatePostDto\n                                            \n                                                            UpdatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Param,\n  Patch,\n  Body,\n  Delete,\n  ParseIntPipe,\n  Query,\n} from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { ApiResponse, ApiOperation, ApiParam } from '@nestjs/swagger';\nimport { UpdatePostDto } from './dtos/update-post.dto';\nimport { GetPostsDto } from './dtos/get-posts.dto';\n\n@Controller('posts')\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n\n  @ApiOperation({\n    summary: 'Get all posts',\n    description: 'Returns all posts',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Returns all posts',\n  })\n  @Get('{/:userId}')\n  public getPosts(\n    @Param('userId') userId: number,\n    @Query() getPostsDto: GetPostsDto,\n  ) {\n    return this.postsService.findAll(getPostsDto, userId);\n  }\n\n  @ApiOperation({\n    summary: 'Create a new post',\n    description: 'Creates a new post with the given data',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'The post has been successfully created.',\n    type: CreatePostDto,\n  })\n  @Post()\n  public createPost(@Body() createPostDto: CreatePostDto) {\n    return this.postsService.create(createPostDto);\n  }\n\n  @ApiOperation({\n    summary: 'Update a post',\n    description: 'Updates a post with the given data',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'The post has been successfully updated.',\n    type: UpdatePostDto,\n  })\n  @Patch()\n  public updatePost(@Body() updatePostDto: UpdatePostDto) {\n    return this.postsService.update(updatePostDto);\n  }\n\n  @ApiOperation({\n    summary: 'Delete a post',\n    description: 'Deletes a post with the given id',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'The post has been successfully deleted.',\n  })\n  @ApiParam({\n    name: 'id',\n    description: 'The id of the post to delete',\n    example: 1,\n    type: Number,\n  })\n  @Delete(':id')\n  public deletePost(@Param('id', ParseIntPipe) id: number) {\n    return this.postsService.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPaginationModule->PostsModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PaginationModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from '../users/users.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from './post.entity';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { TagsModule } from 'src/tags/tags.module';\nimport { PaginationModule } from 'src/common/pagination/pagination.module';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [UsersModule, TagsModule, TypeOrmModule.forFeature([Post, MetaOption]), PaginationModule],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postRepository: Repository, usersService: UsersService, tagsService: TagsService, paginationProvider: PaginationProvider)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginationProvider\n                                                  \n                                                        \n                                                                        PaginationProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostDto: CreatePostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:110\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(postQuery: GetPostsDto, userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postQuery\n                                            \n                                                            GetPostsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(updatePostDto: UpdatePostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updatePostDto\n                                            \n                                                            UpdatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { CreatePostDto } from '../dtos/create-post.dto';\nimport { UpdatePostDto } from '../dtos/update-post.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Post } from '../post.entity';\nimport { Repository } from 'typeorm';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { TagsService } from 'src/tags/providers/tags.service';\nimport { GetPostsDto } from '../dtos/get-posts.dto';\nimport { PaginationProvider } from 'src/common/pagination/providers/pagination.provider';\nimport { Paginated } from 'src/common/interfaces/paginated.interface';\n\n@Injectable()\nexport class PostsService {\n  constructor(\n    @InjectRepository(Post) \n    private readonly postRepository: Repository,\n    private readonly usersService: UsersService,\n    private readonly tagsService: TagsService,\n    private readonly paginationProvider: PaginationProvider,\n  ) {}\n\n  public async findAll(postQuery: GetPostsDto, userId: number): Promise> {\n    const posts = await this.paginationProvider.paginateQuery(postQuery, this.postRepository);\n    return posts;\n  }\n\n  public async create(createPostDto: CreatePostDto) {\n    const author = await this.usersService.findOne(createPostDto.authorId);\n    const tags = await this.tagsService.findMultipleTags(createPostDto.tags);\n\n    if (author) {\n      const post = this.postRepository.create({\n        ...createPostDto,\n        author: author,\n        tags: tags,\n      });\n\n      return this.postRepository.save(post);\n    }\n  }\n\n  public async update(updatePostDto: UpdatePostDto) {\n    // Load post with relations in a single query\n    const post = await this.postRepository\n      .findOne({\n        where: { id: updatePostDto.id },\n        relations: {\n          metaOptions: true,\n          tags: true,\n        },\n      })\n      .catch((error) => {\n        throw new RequestTimeoutException('Unable to process the request', {\n          cause: error,\n          description: 'Database connection error',\n        });\n      });\n\n    if (!post) {\n      throw new NotFoundException('Post not found');\n    }\n\n    // Prepare updates in parallel if both tags and author need to be updated\n    const updates = await Promise.all([\n      updatePostDto.tags\n        ? this.tagsService\n            .findMultipleTags(updatePostDto.tags)\n            .catch((error) => {\n              throw new RequestTimeoutException(\n                'Unable to process the request',\n                {\n                  cause: error,\n                  description: 'Database connection error',\n                },\n              );\n            })\n        : null,\n      updatePostDto.authorId\n        ? this.usersService.findOne(updatePostDto.authorId).catch((error) => {\n            throw new RequestTimeoutException('Unable to process the request', {\n              cause: error,\n              description: 'Database connection error',\n            });\n          })\n        : null,\n    ]);\n\n    // Apply updates\n    const [tags, author] = updates;\n    if (tags) post.tags = tags;\n    if (author) post.author = author;\n\n    // Update remaining fields\n    Object.assign(post, updatePostDto);\n\n    // Save the updated post\n    return this.postRepository.save(post).catch((error) => {\n      throw new RequestTimeoutException('Unable to process the request', {\n        cause: error,\n        description: 'Database connection error',\n      });\n    });\n  }\n\n  public async delete(id: number) {\n    await this.postRepository.delete(id);\n    return { deleted: true, id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/sign-in.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The email of the user', example: 'test@test.com'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/sign-in.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The password of the user', example: 'password'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/sign-in.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsEmail, IsNotEmpty, IsString } from \"class-validator\";\n\nexport class SignInDto {\n  @ApiProperty({\n    description: 'The email of the user',\n    example: 'test@test.com',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiProperty({\n    description: 'The password of the user',\n    example: 'password',\n  })\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SignInProvider.html":{"url":"injectables/SignInProvider.html","title":"injectable - SignInProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SignInProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/sign-in.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, hashingProvider: HashingProvider, jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/sign-in.provider.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/sign-in.provider.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  Inject,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { SignInDto } from '../dtos/sign-in.dto';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { HashingProvider } from './hashing.provider';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigType } from '@nestjs/config';\nimport jwtConfig from '../config/jwt.config';\n\n@Injectable()\nexport class SignInProvider {\n  constructor(\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n\n    @Inject(HashingProvider)\n    private readonly hashingProvider: HashingProvider,\n\n    @Inject(JwtService)\n    private readonly jwtService: JwtService,\n\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n  ) {}\n\n  public async signIn(signInDto: SignInDto) {\n    const { email, password } = signInDto;\n    const user = await this.usersService.findOneByEmail(email);\n    const isPasswordValid = await this.hashingProvider.compare(\n      password,\n      user.password,\n    );\n\n    if (!isPasswordValid) {\n      throw new UnauthorizedException('Invalid credentials');\n    }\n\n    const accessToken = await this.jwtService.signAsync(\n      {\n        sub: user.id,\n        email: user.email,\n      },\n      {\n        secret: this.jwtConfiguration.secret,\n        expiresIn: this.jwtConfiguration.signOptions.expiresIn,\n        audience: this.jwtConfiguration.signOptions.audience,\n        issuer: this.jwtConfiguration.signOptions.issuer,\n      },\n    );\n\n    return {\n      accessToken,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:45\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, CreateDateColumn, DeleteDateColumn, Entity, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm';\n\n@Entity()\nexport class Tag {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 256,\n    unique: true,\n  })\n  name: string;\n\n  @Column({\n    type: 'varchar',\n    length: 256,\n    unique: true,\n  })\n  slug: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  description: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  schema?: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: true,\n  })\n  featuredImageUrl?: string;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @DeleteDateColumn()\n  deletedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTagDto: CreateTagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a new tag'})@ApiResponse({status: 201, description: 'The tag has been successfully created.'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get all tags'})@ApiResponse({status: 200, description: 'Returns all tags'})@Get()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body, Get } from '@nestjs/common';\nimport { TagsService } from './providers/tags.service';\nimport { CreateTagDto } from './dtos/create-tag.dto';\nimport { ApiOperation, ApiResponse } from '@nestjs/swagger';\n\n@Controller('tags')\nexport class TagsController {\n  constructor(private readonly tagsService: TagsService) {}\n\n  @ApiOperation({ summary: 'Create a new tag' })\n  @ApiResponse({\n    status: 201,\n    description: 'The tag has been successfully created.',\n  })\n  @Post()\n  create(@Body() createTagDto: CreateTagDto) {\n    return this.tagsService.create(createTagDto);\n  }\n\n  @ApiOperation({ summary: 'Get all tags' })\n  @ApiResponse({\n    status: 200,\n    description: 'Returns all tags',\n  })\n  @Get()\n  findAll() {\n    return this.tagsService.findAll();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\n\nTagsService \n\nTagsService \n\n\n\nTagsModule\n\nTagsModule\n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsController } from './tags.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Tag } from './tag.entity';\nimport { TagsService } from './providers/tags.service';\n\n@Module({\n  controllers: [TagsController],\n  imports: [TypeOrmModule.forFeature([Tag])],\n  providers: [TagsService],\n  exports: [TagsService],\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagsService.html":{"url":"injectables/TagsService.html","title":"injectable - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/providers/tags.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findMultipleTags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tags/providers/tags.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTagDto: CreateTagDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findMultipleTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMultipleTags(tagIds: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tagIds\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Tag } from '../tag.entity';\nimport { In, Repository } from 'typeorm';\nimport { CreateTagDto } from '../dtos/create-tag.dto';\n\n@Injectable()\nexport class TagsService {\n  constructor(\n    @InjectRepository(Tag)\n    private readonly tagRepository: Repository,\n  ) {}\n\n  public async create(createTagDto: CreateTagDto) {\n    const tag = this.tagRepository.create(createTagDto);\n    return this.tagRepository.save(tag);\n  }\n\n  public async findAll() {\n    return this.tagRepository.find();\n  }\n\n  public async findMultipleTags(tagIds: number[]) {\n    return this.tagRepository.find({\n      where: {\n        id: In(tagIds),\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePostDto.html":{"url":"classes/UpdatePostDto.html","title":"class - UpdatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/update-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the post to update', example: 1})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/update-post.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsInt, IsNotEmpty } from 'class-validator';\nimport { CreatePostDto } from './create-post.dto';\n\nexport class UpdatePostDto  extends PartialType(CreatePostDto){\n  @ApiProperty({\n    description: 'The ID of the post to update',\n    example: 1,\n  })\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:39\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  firstName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: true,\n  })\n  lastName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n    unique: true,\n  })\n  email: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  password: string;\n\n  @OneToMany(() => Post, (post) => post.author)\n  posts: Post[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createManyUsers\n                            \n                            \n                                    \n                                    Public\n                                createUser\n                            \n                            \n                                    \n                                    Public\n                                deleteUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createManyUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createManyUsers(createManyUsersDto: CreateManyUsersDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/create-many')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamDto: GetUserParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('{/:id}')@ApiOperation({summary: 'Get users', description: 'Get users with a specific id or all users'})@ApiResponse({status: 200, description: 'Users fetched successfully'})@ApiQuery({name: 'limit', required: false, type: Number, description: 'Amount of users returned from the request. Default is 10.'})@ApiQuery({name: 'page', required: false, type: Number, description: 'Page number. Default is 1.'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUserParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Param,\n  Patch,\n  ParseIntPipe,\n  Body,\n  Query,\n  DefaultValuePipe,\n  Delete,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUserParamDto } from './dtos/get-user-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/users.service';\nimport ManyUsersProvider from './providers/many-users.provider';\nimport { ApiQuery, ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { CreateManyUsersDto } from './dtos/create-many-users.dto';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n  /**\n   * @limit - amount of users returned from the request. Default is 10.\n   * @page - page number. Default is 1.\n   * @id - user id. Optional\n   */\n  @Get('{/:id}')\n  @ApiOperation({\n    summary: 'Get users',\n    description: 'Get users with a specific id or all users',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Users fetched successfully',\n  })\n  @ApiQuery({\n    name: 'limit',\n    required: false,\n    type: Number,\n    description: 'Amount of users returned from the request. Default is 10.',\n  })\n  @ApiQuery({\n    name: 'page',\n    required: false,\n    type: Number,\n    description: 'Page number. Default is 1.',\n  })\n  public getUsers(\n    @Param() getUserParamDto: GetUserParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    if (getUserParamDto.id) {\n      return this.usersService.findOne(getUserParamDto.id);\n    }\n\n    return this.usersService.findAll(getUserParamDto, limit, page);\n  }\n\n  @Post()\n  public createUser(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.createUser(createUserDto);\n  }\n\n  @Patch()\n  public updateUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n  }\n\n  @Delete('/:id')\n  public deleteUser(@Param('id', ParseIntPipe) id: number) {\n    return 'delete user';\n  }\n\n  @Post('/create-many')\n  public createManyUsers(@Body() createManyUsersDto: CreateManyUsersDto) {\n    return this.usersService.createManyUsers(createManyUsersDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUsersModule -->\n\nCreateUserProvider->UsersModule\n\n\n\n\n\nFindOneByEmailProvider\n\nFindOneByEmailProvider\n\nUsersModule -->\n\nFindOneByEmailProvider->UsersModule\n\n\n\n\n\nManyUsersProvider\n\nManyUsersProvider\n\nUsersModule -->\n\nManyUsersProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateUserProvider\n                        \n                        \n                            FindOneByEmailProvider\n                        \n                        \n                            ManyUsersProvider\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\nimport { ConfigModule } from '@nestjs/config';\nimport { CreateUserProvider } from './providers/create-user.provider';\nimport profileConfig from './config/profile.config';\nimport ManyUsersProvider from './providers/many-users.provider';\nimport { HashingProvider } from 'src/auth/providers/hashing.provider';\nimport { BcryptProvider } from 'src/auth/providers/bcrypt.provider';\nimport { FindOneByEmailProvider } from './providers/find-one-by-email.provider';\n@Module({\n  controllers: [UsersController],\n  providers: [\n    UsersService,\n    ManyUsersProvider,\n    CreateUserProvider,\n    { provide: HashingProvider, useClass: BcryptProvider },\n    FindOneByEmailProvider,\n  ],\n  imports: [\n    forwardRef(() => AuthModule),\n    TypeOrmModule.forFeature([User]),\n    ConfigModule.forFeature(profileConfig),\n  ],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Class that handles the users service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createManyUsers\n                            \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Public\n                                    Async\n                                findOneByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, userRepository: Repository, profileConfiguration: ConfigType<>, dateSource: DataSource, createUserProvider: CreateUserProvider, manyUsersProvider: ManyUsersProvider, findOneByEmailProvider: FindOneByEmailProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:25\n                            \n                        \n\n                \n                    \n                            Constructor for the users service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe auth service\n\n\n                                                        \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        profileConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        dateSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        createUserProvider\n                                                  \n                                                        \n                                                                        CreateUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        manyUsersProvider\n                                                  \n                                                        \n                                                                        ManyUsersProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        findOneByEmailProvider\n                                                  \n                                                        \n                                                                        FindOneByEmailProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createManyUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createManyUsers(createManyUsersDto: CreateManyUsersDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUserParamDto: GetUserParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:64\n                        \n                    \n\n\n            \n                \n                        Finds all users\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUserParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe DTO for the get user param\n\n\n                                            \n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe limit of users to return\n\n\n                                            \n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe page number\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The users\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:87\n                        \n                    \n\n\n            \n                \n                        Finds a user by id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe id of the user\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The user\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:109\n                        \n                    \n\n\n            \n                \n                        Finds a user by email\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe email of the user\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The user\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  Inject,\n  Injectable,\n  NotFoundException,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { GetUserParamDto } from '../dtos/get-user-param.dto';\nimport { AuthService } from 'src/auth/providers/auth.service';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, QueryRunner, DataSource } from 'typeorm';\nimport { User } from '../user.entity';\nimport profileConfig from '../config/profile.config';\nimport { ConfigType } from '@nestjs/config';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { CreateUserProvider } from './create-user.provider';\nimport ManyUsersProvider from './many-users.provider';\nimport { CreateManyUsersDto } from '../dtos/create-many-users.dto';\nimport { FindOneByEmailProvider } from './find-one-by-email.provider';\n\n/**\n * Class that handles the users service\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Constructor for the users service\n   * @param authService - The auth service\n   */\n  constructor(\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n\n    @InjectRepository(User)\n    private readonly userRepository: Repository,\n\n    @Inject(profileConfig.KEY)\n    private readonly profileConfiguration: ConfigType,\n\n    private readonly dateSource: DataSource,\n\n    private readonly createUserProvider: CreateUserProvider,\n\n    private readonly manyUsersProvider: ManyUsersProvider,\n\n    private readonly findOneByEmailProvider: FindOneByEmailProvider,\n  ) {}\n\n  public async createUser(createUserDto: CreateUserDto) {\n    return this.createUserProvider.createUser(createUserDto);\n  }\n\n  public async createManyUsers(createManyUsersDto: CreateManyUsersDto) {\n    return this.manyUsersProvider.createManyUsers(createManyUsersDto);\n  }\n\n  /**\n   * Finds all users\n   * @param getUserParamDto - The DTO for the get user param\n   * @param limit - The limit of users to return\n   * @param page - The page number\n   * @returns The users\n   */\n  public findAll(\n    getUserParamDto: GetUserParamDto,\n    limit: number,\n    page: number,\n  ) {\n    const isAuthenticated = this.authService.isAuthenticated();\n\n    try {\n      const users = this.userRepository.find();\n      return users;\n    } catch (error) {\n      throw new RequestTimeoutException('Unable to process the request', {\n        cause: error,\n        description: 'Error finding the users',\n      });\n    }\n  }\n\n  /**\n   * Finds a user by id\n   * @param id - The id of the user\n   * @returns The user\n   */\n  public async findOne(id: number) {\n    try {\n      const user = await this.userRepository.findOneBy({ id });\n\n      if (!user) {\n        throw new NotFoundException('User not found');\n      }\n\n      return user;\n    } catch (error) {\n      throw new RequestTimeoutException('Unable to process the request', {\n        cause: error,\n        description: 'Error finding the user',\n      });\n    }\n  }\n\n  /**\n   * Finds a user by email\n   * @param email - The email of the user\n   * @returns The user\n   */\n  public async findOneByEmail(email: string) {\n    return this.findOneByEmailProvider.findOneByEmail(email);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dtos/sign-in.dto.ts\n            \n            class\n            SignInDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/providers/bcrypt.provider.ts\n            \n            injectable\n            BcryptProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/hashing.provider.ts\n            \n            injectable\n            HashingProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/sign-in.provider.ts\n            \n            injectable\n            SignInProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/dtos/pagination-query.dto.ts\n            \n            class\n            PaginationQueryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/interfaces/paginated.interface.ts\n            \n            interface\n            Paginated\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/pagination/providers/pagination.provider.ts\n            \n            injectable\n            PaginationProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-post-meta-options.dto.ts\n            \n            class\n            CreateMetaOptionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-option.entity.ts\n            \n            entity\n            MetaOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/providers/meta-options.service.ts\n            \n            injectable\n            MetaOptionsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/posts/dtos/get-posts.dto.ts\n            \n            class\n            GetPostsBaseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/get-posts.dto.ts\n            \n            class\n            GetPostsDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/update-post.dto.ts\n            \n            class\n            UpdatePostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/providers/tags.service.ts\n            \n            injectable\n            TagsService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/tags/tag.entity.ts\n            \n            entity\n            Tag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dtos/create-many-users.dto.ts\n            \n            class\n            CreateManyUsersDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-user-param.dto.ts\n            \n            class\n            GetUserParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/create-user.provider.ts\n            \n            injectable\n            CreateUserProvider\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/users/providers/find-one-by-email.provider.ts\n            \n            injectable\n            FindOneByEmailProvider\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/users/providers/many-users.provider.ts\n            \n            injectable\n            ManyUsersProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^11.0.1\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/platform-express : ^11.0.1\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            joi : ^17.13.3\n        \n            pg : ^8.14.1\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.22\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostStatus   (src/.../create-post.enum.ts)\n                        \n                        \n                            PostType   (src/.../create-post.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/dtos/enums/create-post.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostStatus\n                    \n                \n                        \n                            \n                                 Draft\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 Scheduled\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 Review\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 Published\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        PostType\n                    \n                \n                        \n                            \n                                 Post\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 Page\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 Story\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 Series\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaginationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPaginationModule->PostsModule\n\n\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nTagsService \n\nTagsService \n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUsersModule -->\n\nCreateUserProvider->UsersModule\n\n\n\n\n\nFindOneByEmailProvider\n\nFindOneByEmailProvider\n\nUsersModule -->\n\nFindOneByEmailProvider->UsersModule\n\n\n\n\n\nManyUsersProvider\n\nManyUsersProvider\n\nUsersModule -->\n\nManyUsersProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    13 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    12 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
